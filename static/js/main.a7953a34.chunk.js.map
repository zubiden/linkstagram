{"version":3,"sources":["components/post/FeedPost.module.scss","components/profile/ProfileEdit.module.scss","components/profile/ProfileInfo.module.scss","components/basic/Button.tsx","slices/localizationSlice.ts","util/api.ts","slices/postsSlice.ts","slices/profileSlice.ts","util/hooks.ts","components/Footer.tsx","components/basic/Avatar.tsx","components/Header.tsx","slices/commentsSlice.ts","store.ts","util/date.ts","components/post/FeedPost.tsx","components/post/PostsFeed.tsx","components/basic/Modal.tsx","components/basic/TextArea.tsx","components/post/NewPost.tsx","components/basic/Input.tsx","components/profile/ProfileEdit.tsx","components/profile/ProfileInfo.tsx","components/StoriesSlider.tsx","routes/Home.tsx","routes/Login.tsx","routes/OwnProfile.tsx","routes/Profile.tsx","App.tsx","serviceWorker.ts","index.tsx","routes/Login.module.scss","components/Header.module.scss","components/basic/Button.module.scss","routes/Home.module.scss","components/Footer.module.scss","components/basic/Avatar.module.scss","components/post/NewPost.module.scss","components/post/PostsFeed.module.scss","components/basic/Modal.module.scss","components/basic/TextArea.module.scss","components/basic/Input.module.scss","components/StoriesSlider.module.scss"],"names":["module","exports","Button","color","lightBorder","square","to","className","children","smallPadding","onClick","otherArgs","history","useHistory","classNames","styles","button","ev","push","VALID_LANGUAGES","initialState","strings","code","localStorage","getItem","status","setLanguage","createAsyncThunk","thunkAPI","a","state","getState","selectTranslationStrings","Object","keys","length","selectLanguageCode","fetch","then","res","json","key","setItem","dispatch","setLanguageCode","Error","localizationSlice","createSlice","name","reducers","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","localization","API_BASE","fetchComments","post_id","request","removeLike","setLike","fetchPosts","page","fetchUserPosts","username","fetchProfiles","url","method","data","options","headers","Headers","body","JSON","stringify","auth","set","text","parse","fetchAllPosts","setCurrentPostsUsername","refetchPost","id","likePost","dislikePost","deleteOwnPost","removePost","createOwnPost","params","post","postsSlice","loadedPosts","currentPostsUsername","filter","rejected","findIndex","selectLoadedPosts","posts","selectPostsStatus","fetchAllProfiles","fetchCurrentAccount","account","error","updateAccount","newInfo","profileSlice","allProfiles","profilesFetchStatus","accountFetchStatus","logout","removeItem","resetAccountFetchStatus","selectProfiles","profile","selectAccount","selectIsLoggedIn","useAppDispatch","useDispatch","useAppSelector","useSelector","useLocalization","lp","replaces","count","defaultValue","undefined","isLocalizationParameters","value","found","replace","isLanguageValue","countToPluralCode","other","replacement","replaceAll","uk","en","Footer","footer","buttonRow","year","toString","GreyButton","greyButton","Avatar","size","border","style","width","visible","src","avatar","alt","Header","home","isLoggedIn","langCode","useState","dropdown","setDropdown","header","logo","separator","hidden","entries","map","dropdownItem","profile_photo_url","reserver","fetchAllComments","setCurrentPostId","commentsSlice","loadedComments","currentPostId","store","configureStore","reducer","postsReducer","profileReducer","comments","commentsReducer","localizationReducer","getRelativeDateKey","timestamp","now","Date","getTime","diff","Math","abs","minutes","floor","hours","date","toLocaleDateString","month","day","FeedPost","author","info","first_name","last_name","time","created_at","more","content","photos","image","description","icon","likes_count","liked","is_liked","share","IconText","iconText","PostsFeed","useEffect","feed","postList","Modal","isOpen","onRequestClose","modal","overlayClassName","overlay","TextArea","label","placeholder","otherParams","textArea","uppy","Uppy","restrictions","maxNumberOfFiles","allowedFileTypes","use","AwsS3","companionUrl","NewPost","opened","setDescription","newPost","locale","dropHereOr","rows","onChange","currentTarget","buttons","upload","result","console","log","successful","meta","storage","split","photos_attributes","metadata","filename","mime_type","type","failed","Input","iconColor","input","ProfileEdit","firstName","setFirstName","secondName","setSecondName","job_title","jobTitle","setJobTitle","profileEdit","title","topBlock","ProfileInfo","own","isNewPostOpened","setNewPostOpened","isProfileEditOpened","setProfileEditOpened","profileInfo","top","followers","number","smallText","following","bottom","actionButtons","StoriesSlider","profiles","slider","Home","left","right","sticky","Login","signUp","setSignUp","email","setEmail","setUsername","password","setPassword","login","presentation","authPane","get","switch","inlineSwitch","OwnProfile","Profile","useParams","App","fun","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","setAppElement","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"8FACAA,EAAOC,QAAU,CAAC,KAAO,uBAAuB,OAAS,yBAAyB,KAAO,uBAAuB,KAAO,uBAAuB,KAAO,uBAAuB,KAAO,uBAAuB,QAAU,0BAA0B,OAAS,yBAAyB,MAAQ,wBAAwB,YAAc,8BAA8B,OAAS,yBAAyB,SAAW,2BAA2B,MAAQ,wBAAwB,KAAO,uBAAuB,UAAY,4BAA4B,MAAQ,0B,mBCAlhBD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,OAAS,4BAA4B,MAAQ,2BAA2B,OAAS,4BAA4B,SAAW,8BAA8B,KAAO,0BAA0B,MAAQ,2BAA2B,YAAc,iCAAiC,QAAU,+B,mBCApVD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,IAAM,yBAAyB,UAAY,+BAA+B,UAAY,+BAA+B,UAAY,+BAA+B,OAAS,4BAA4B,KAAO,0BAA0B,YAAc,iCAAiC,cAAgB,qC,0MCczVC,EAA+B,SAAC,GAWlC,IAAD,MATFC,aASE,MATM,QASN,MARFC,mBAQE,aAPFC,cAOE,SANFC,EAME,EANFA,GACAC,EAKE,EALFA,UACAC,EAIE,EAJFA,SAIE,IAHFC,oBAGE,SAFFC,EAEE,EAFFA,QACGC,EACD,qGACAC,EAAUC,cAEhB,OACI,gDAAQN,UAAWO,KAAU,mBACxBC,IAAOC,QAAS,GADQ,cAExBD,IAAOZ,IAAS,GAFQ,cAGxBY,IAAOV,OAASA,GAHQ,cAIxBU,IAAOX,YAAcA,GAJG,cAKxBW,IAAON,aAAeA,GALE,GAM1BF,GACCG,QAAS,SAAAO,GACE,OAAPP,QAAO,IAAPA,KAAUO,GACNX,GAAIM,EAAQM,KAAKZ,KAErBK,GAXR,aAYKH,M,uCCpCAW,EAA6C,CACtD,GAAM,KACN,GAAM,MAaJC,EAAkC,CACpCC,QAAS,GACTC,KAAMC,aAAaC,QAAQ,aAAe,KAC1CC,OAAQ,QAGCC,EAAcC,YACvB,2BADuC,uCAEvC,WAAOL,EAAcM,GAArB,iBAAAC,EAAA,2DACQP,KAAQH,GADhB,mBAEcW,EAAQF,EAASG,WACjBV,EAAUW,EAAyBF,IACtCG,OAAOC,KAAKb,GAASc,QAAUb,IAASc,EAAmBN,GAJtE,yCAKmBT,GALnB,gCAQegB,MAAM,GAAD,OAjCO,WAiCP,YAAuBf,EAAvB,UACPgB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACF,IAAInB,EAAsB,GAC1B,IAAK,IAAIoB,KAAOD,EACZnB,EAAQoB,GAAOD,EAAKC,GAMxB,OAHAlB,aAAamB,QAAQ,WAAYpB,GACjCM,EAASe,SAASC,EAAgBtB,IAE3BD,MAnBvB,aAsBc,IAAIwB,MAAM,yBAtBxB,2CAFuC,yDA6BrCC,EAAoBC,YAAY,CAClCC,KAAM,eACN5B,eACA6B,SAAU,CACNL,gBADM,SACUd,EAAOoB,GACnBpB,EAAMR,KAAO4B,EAAOC,UAG5BC,cAAe,SAACC,GACZA,EAAQC,QAAQ5B,EAAY6B,SAAS,SAACzB,GAClCA,EAAML,OAAS,aAChB6B,QAAQ5B,EAAY8B,WAAW,SAAC1B,EAAOoB,GACtCpB,EAAML,OAAS,OACfK,EAAMT,QAAU6B,EAAOC,cAMpBL,IAAf,QAGQF,EAAoBE,EAAkBW,QAAtCb,gBAIKR,EAAqB,SAACN,GAAD,OAAsBA,EAAM4B,aAAapC,MAC9DU,EAA2B,SAACF,GAAD,OAAsBA,EAAM4B,aAAarC,SCjFpEsC,EAAW,6BAwFjB,SAASC,EAAcC,GAC1B,OAAOC,EAAQ,GAAD,OAAIH,EAAJ,kBAAsBE,EAAtB,cAeX,SAASE,EAAWF,GACvB,OAAOC,EAAQ,GAAD,OAAIH,EAAJ,kBAAsBE,EAAtB,SAAsC,UAGjD,SAASG,EAAQH,GACpB,OAAOC,EAAQ,GAAD,OAAIH,EAAJ,kBAAsBE,EAAtB,SAAsC,QAiBjD,SAASI,IAAgD,IAArCC,EAAoC,uDAArB,EACtC,OAAOJ,EAAQ,GAAD,OAAIH,EAAJ,uBAA2BO,IAGtC,SAASC,EAAeC,GAC3B,OAAON,EAAQ,GAAD,OAAIH,EAAJ,qBAAyBS,EAAzB,WAKX,SAASC,IAAsD,IAAxCH,EAAuC,uDAAxB,EACzC,OAAOJ,EAAQ,GAAD,OAAIH,EAAJ,0BAA8BO,IAShD,SAASJ,EAAQQ,GAAmG,IAAtFC,EAAqF,uDAAvC,MAAOC,EAAgC,uDAApB,KACvFC,EAAuB,CACvBF,UAGJE,EAAQC,QAAU,IAAIC,QAAQ,CAC1B,eAAgB,qBAGjBH,IACCC,EAAQG,KAAOC,KAAKC,UAAUN,IAGlC,IAAMO,EAAOxD,aAAaC,QAAQ,QAIlC,OAHGuD,GACCN,EAAQC,QAAQM,IAAI,gBAAiB,UAAWD,GAE7C1C,MAAMiC,EAAKG,GAASnC,MAAK,SAAAC,GAAG,OAAIA,EAAI0C,UAAQ3C,MAAK,SAAA2C,GACpD,OAAmB,IAAhBA,EAAK9C,OAAqB,GACtB0C,KAAKK,MAAMD,MC5J1B,IAMaE,EAAgBxD,YACzB,sBADyC,uCAEzC,WAAOyC,EAAqCxC,GAA5C,SAAAC,EAAA,0DACOuC,EADP,uBAEQxC,EAASe,SAASyC,EAAwBhB,IAFlD,kBAGeD,EAAeC,IAH9B,cAKQxC,EAASe,SAASyC,EAAwB,OALlD,kBAMenB,KANf,2CAFyC,yDAahCoB,EAAc1D,YACvB,kBADuC,uCAEvC,WAAOkC,EAAiBjC,GAAxB,SAAAC,EAAA,gFD4FsByD,EC3FDzB,ED4FdC,EAAQ,GAAD,OAAIH,EAAJ,kBAAsB2B,MC7FpC,iCD4FG,IAAmBA,IC5FtB,OAFuC,yDAO9BC,EAAW5D,YACpB,aADoC,uCAEpC,WAAOkC,EAAiBjC,GAAxB,SAAAC,EAAA,sEACUmC,EAAQH,GADlB,OAEIjC,EAASe,SAAS0C,EAAYxB,IAFlC,2CAFoC,yDAQ3B2B,EAAc7D,YACvB,gBADuC,uCAEvC,WAAOkC,EAAiBjC,GAAxB,SAAAC,EAAA,sEACUkC,EAAWF,GADrB,OAEIjC,EAASe,SAAS0C,EAAYxB,IAFlC,2CAFuC,yDAQ9B4B,EAAgB9D,YACzB,eADyC,uCAEzC,WAAOkC,EAAiBjC,GAAxB,SAAAC,EAAA,sEDiEuByD,EChEFzB,EDiEdC,EAAQ,GAAD,OAAIH,EAAJ,kBAAsB2B,GAAM,UClE1C,OAEI1D,EAASe,SAAS+C,EAAW7B,IAFjC,iCDiEG,IAAoByB,ICjEvB,OAFyC,yDAQhCK,EAAgBhE,YACzB,aADyC,uCAEzC,WAAOiE,EAAiChE,GAAxC,SAAAC,EAAA,sEDqDuBgE,ECpDFD,EDqDd9B,EAAQ,GAAD,OAAIH,EAAJ,UAAsB,OAAQ,CAACkC,SCtD7C,OAKIjE,EAASe,SAASwC,KALtB,iCDqDG,IAAoBU,ICrDvB,OAFyC,yDAWvCC,EAAa/C,YAAY,CAC3BC,KAAM,QACN5B,aA/D6B,CAC7B2E,YAAa,GACbC,qBAAsB,KACtBvE,OAAQ,QA6DRwB,SAAU,CACNmC,wBADM,SACkBtD,EAAOoB,GAC3BpB,EAAMkE,qBAAuB9C,EAAOC,SAExCuC,WAJM,SAIK5D,EAAOoB,GACdpB,EAAMiE,YAAcjE,EAAMiE,YAAYE,QAAO,SAAAJ,GAAI,OAAIA,EAAKP,KAAOpC,EAAOC,aAGhFC,cAAe,SAACC,GACZA,EACCC,QAAQ6B,EAAc5B,SAAS,SAACzB,GAC7BA,EAAML,OAAS,UACfK,EAAMiE,YAAc,MACrBzC,QAAQ6B,EAAc3B,WAAW,SAAC1B,EAAOoB,GACxCpB,EAAML,OAAS,OACfK,EAAMiE,YAAc7C,EAAOC,WAC5BG,QAAQ6B,EAAce,UAAU,SAACpE,GAChCA,EAAML,OAAS,YAElB6B,QAAQ+B,EAAY7B,WAAW,SAAC1B,EAAOoB,GACpC,IAAMoC,EAAKxD,EAAMiE,YAAYI,WAAU,SAAAN,GAAI,OAAIA,EAAKP,KAAOpC,EAAOC,QAAQmC,OAC/D,IAARA,IACCxD,EAAMiE,YAAYT,GAAMpC,EAAOC,eAOhC2C,IAAf,Q,EAGgDA,EAAWrC,QAAnD2B,E,EAAAA,wBAAyBM,E,EAAAA,WAIpBU,EAAoB,SAACtE,GAAD,OAAsBA,EAAMuE,MAAMN,aACtDO,GAAoB,SAACxE,GAAD,OAAsBA,EAAMuE,MAAM5E,QC5FtD8E,GAAmB5E,YAC5B,2BAD4C,sBAE5C,sBAAAE,EAAA,+EACWwC,KADX,4CAKSmC,GAAsB7E,YAC/B,uBAD+C,sBAE/C,4BAAAE,EAAA,sEFoEOiC,EAAQ,GAAD,OAAIH,EAAJ,aEpEd,UACU8C,EADV,QAEeA,EAsBUC,MAxBzB,yCAGe,MAHf,gCAKeD,GALf,4CAUSE,GAAgBhF,YACzB,wBADyC,uCAEzC,WAAOiF,EAAmChF,GAA1C,eAAAC,EAAA,sEF2DwB4E,EE1DUG,EF2D3B9C,EAAQ,GAAD,OAAIH,EAAJ,YAAwB,QAAS,CAAC8C,YE5DhD,YAEO,UADGlE,EADV,+BAGcM,MAAM,4BAHpB,cAKQjB,EAASe,SAASwC,EAAyCvD,EAASG,WDmEVsE,MAAML,uBCxExE,kBAMezD,GANf,iCDwEsC,IDbdkE,IE3DxB,OAFyC,yDAiB7C,IAAMI,GAAe9D,YAAY,CAC7BC,KAAM,UACN5B,aA7C+B,CAC/BqF,QAAS,KACTK,YAAa,GACbC,oBAAqB,OACrBC,mBAAoB,QA0CpB/D,SAAU,CACNgE,OADM,SACCnF,GACHA,EAAM2E,QAAU,KAChBlF,aAAa2F,WAAW,SAG5BC,wBANM,SAMkBrF,GACpBA,EAAMkF,mBAAqB,SAGnC5D,cAAe,SAACC,GACZA,EAECC,QAAQiD,GAAiBhD,SAAS,SAACzB,GAChCA,EAAMiF,oBAAsB,aAC7BzD,QAAQiD,GAAiB/C,WAAW,SAAC1B,EAAOoB,GAC3CpB,EAAMiF,oBAAsB,OAC5BjF,EAAMgF,YAAc5D,EAAOC,WAC5BG,QAAQiD,GAAiBL,UAAU,SAACpE,GACnCA,EAAMiF,oBAAsB,SAC5BjF,EAAMgF,YAAc,MAGvBxD,QAAQkD,GAAoBjD,SAAS,SAACzB,GACnCA,EAAMkF,mBAAqB,aAC5B1D,QAAQkD,GAAoBhD,WAAW,SAAC1B,EAAOoB,GAC9CpB,EAAMkF,mBAAqB,OAC3BlF,EAAM2E,QAAUvD,EAAOC,WACxBG,QAAQkD,GAAoBN,UAAU,SAACpE,GACtCA,EAAMkF,mBAAqB,SAC3BlF,EAAM2E,QAAU,QAEnBnD,QAAQqD,GAAcnD,WAAW,SAAC1B,EAAOoB,GACtCpB,EAAM2E,QAAUvD,EAAOC,cAMpB0D,MAAf,Q,GAGmDA,GAAapD,QAAjDwD,G,GAAAA,OAGFG,I,GAHUD,wBAGO,SAACrF,GAAD,OAAsBA,EAAMuF,QAAQP,cAErDQ,GAAgB,SAACxF,GAAD,OAAsBA,EAAMuF,QAAQZ,SAEpDc,GAAmB,SAACzF,GAAD,QAAwBA,EAAMuF,QAAQZ,SClGzDe,GAAiB,kBAAMC,eACvBC,GAAkDC,IAkBlDC,GAAkB,WAC3B,IAAMvG,EAAUqG,GAAe1F,GACzBV,EAAOoG,GAAetF,GAuB5B,OArBW,SAALyF,IAAiM,IAA3LpF,EAA0L,uDAAnJ,8BAA+BqF,EAAoH,uDAAhF,GAAIC,EAA4E,uDAA5D,EAAGC,EAAyD,4DAAtBC,EAClL,GAAGC,GAAyBzF,GAAM,OAAOoF,EAAGpF,EAAIA,IAAKA,EAAIqF,SAAUrF,EAAIsF,MAAOtF,EAAIuF,cAC5E,IAAIG,EAAQ9G,EAAQoB,GAC1B,IAAI0F,EACH,OAAOH,GAAgBvF,EAGxB,IAAI2F,EAAQ3F,EAOZ,IAAI,IAAI4F,KALED,EADPE,GAAgBH,GACDA,EAAMI,GAAkBjH,EAAMyG,KAAWI,EAAMK,MAExDL,EAGUL,EAAU,CAC5B,IAAIW,EAAcX,EAASO,GAC3BD,EAAQA,EAAMM,WAAN,WAAqBL,EAArB,KAAiCI,GAEpC,OAAOL,IAMf,SAASG,GAAkBjH,EAAcyG,GAKrC,MAJwF,CACpF,GAAMY,IACN,GAAMC,KAEKtH,GAAMyG,GAGlB,SAASG,GAAyBzF,GACrC,YAAkCwF,IAA1BxF,EAAeN,OAGpB,SAASmG,GAAgBH,GAC5B,YAAoCF,IAA5BE,EAAiBhG,O,wBChEhB0G,GAAa,WACtB,IAAMhB,EAAKD,KAEX,OACI,yBAAQrH,UAAWQ,KAAO+H,OAA1B,UACI,sBAAKvI,UAAWQ,KAAOgI,UAAvB,UACI,cAAC,GAAD,CAAY9D,KAAM4C,EAAG,kBACrB,cAAC,GAAD,CAAY5C,KAAM4C,EAAG,iBACrB,cAAC,GAAD,CAAY5C,KAAM4C,EAAG,oBACrB,cAAC,GAAD,CAAY5C,KAAM4C,EAAG,kBACrB,cAAC,GAAD,CAAY5C,KAAM4C,EAAG,sBACrB,cAAC,GAAD,CAAY5C,KAAM4C,EAAG,wBAEzB,qBAAKtH,UAAWQ,KAAOgI,UAAvB,SACI,cAAC,GAAD,CAAY9D,KAAM4C,EAAG,mBAAoB,CAACmB,KAhBrC,MAgBwDC,qBAMvEC,GAAiC,SAAC,GAAY,IAAXjE,EAAU,EAAVA,KACrC,OAAO,qBAAK1E,UAAWQ,KAAOoI,WAAvB,SAAoClE,K,4BChBlCmE,GAA0B,SAAC,GAAkE,IAAD,EAAhE9E,EAAgE,EAAhEA,IAAgE,IAA3D+E,YAA2D,MAApD,MAAoD,MAA7CC,cAA6C,SAA7B/I,EAA6B,EAA7BA,UAAcI,EAAe,mDACrG,OACI,6CAAKJ,UAAWQ,KAAOV,QAAYM,GAAnC,IAA8C4I,MAAO,CAACC,MAAOH,GAA7D,SACI,qBAAK9I,UAAWO,KAAU,mBACrBC,KAAOuI,QAAS,GADK,cAErBvI,KAAO0I,QAAUH,GAFI,GAGvB/I,GAHH,SAII,qBAAKmJ,IAAKpF,EAAK/D,UAAWQ,KAAO4I,OAAQC,IAAI,iB,oBCHhDC,GAA+B,SAAC,GAAqC,IAAD,MAAnCC,YAAmC,aAArBzC,eAAqB,SACvE1E,EAAW6E,KAEXuC,EAAarC,GAAeH,IAC5Bd,EAAUiB,GAAeJ,IAEzBO,EAAKD,KACLoC,EAAWtC,GAAetF,GAP6C,EAS7C6H,oBAAS,GAToC,oBAStEC,EATsE,KAS5DC,EAT4D,KAW7E,OACI,qCACA,yBAAQ5J,UAAWQ,KAAOqJ,OAA1B,UACI,qBAAK7J,UAAWQ,KAAOsJ,KAAvB,yBACA,qBAAK9J,UAAWQ,KAAOuJ,YACtBR,GAAQ,cAAC,EAAD,CAAQ3J,MAAM,QAAQI,UAAWQ,KAAOC,OAAQV,GAAG,IAAnD,SAAwDuH,EAAG,iBACpE,eAAC,EAAD,CAAQ1H,MAAM,QAAQI,UAAWQ,KAAOC,OAAQZ,aAAW,EAACC,QAAM,EAACK,QAAS,kBAAMyJ,GAAaD,IAA/F,UACK/I,EAAgB6I,GACjB,qBAAKzJ,UAAWO,KAAU,mBACrBC,KAAOmJ,UAAW,GADG,cAErBnJ,KAAOwJ,QAAUL,GAFI,IAGlBxJ,QAAS,kBAAMyJ,GAAY,IAHnC,SAIKlI,OAAOuI,QAAQrJ,GAAiBsJ,KAAI,oCAAEhI,EAAF,KAAO0F,EAAP,YAC7B,qBAAK5H,UAAWQ,KAAO2J,aAAwBhK,QAAS,kBAAMiC,EAASjB,EAAYe,KAAnF,SACK0F,GADqC1F,WAOzD4E,GAAW0C,GAAc,cAAC,GAAD,CAAQzF,IAAKmC,EAAQkE,kBAAmBtB,KAAK,aAE3E,qBAAK9I,UAAWQ,KAAO6J,eC/BlBC,GAAmBlJ,YAC5B,yBAD4C,uCAE5C,WAAOkC,EAAiBjC,GAAxB,SAAAC,EAAA,6DACID,EAASe,SAASmI,GAAiBjH,IADvC,kBAEWD,EAAcC,IAFzB,2CAF4C,yDAQ1CkH,GAAgBhI,YAAY,CAC9BC,KAAM,WACN5B,aAhBgC,CAChC4J,eAAgB,GAChBC,eAAgB,EAChBxJ,OAAQ,QAcRwB,SAAU,CACN6H,iBADM,SACWhJ,EAAOoB,GACpBpB,EAAMmJ,cAAgB/H,EAAOC,UAGrCC,cAAe,SAACC,GACZA,EAAQC,QAAQuH,GAAiBtH,SAAS,SAACzB,GACvCA,EAAML,OAAS,UACfK,EAAMkJ,eAAiB,MACxB1H,QAAQuH,GAAiBrH,WAAW,SAAC1B,EAAOoB,GAC3CpB,EAAML,OAAS,OACfK,EAAMkJ,eAAiB9H,EAAOC,WAC/BG,QAAQuH,GAAiB3E,UAAU,SAACpE,GACnCA,EAAML,OAAS,eAMZsJ,MAAf,QAGQD,GAAqBC,GAActH,QAAnCqH,iBC1BOI,GAlBDC,YAAe,CACzBC,QAAS,CACL/E,MAAOgF,EACPhE,QAASiE,GACTC,SAAUC,GACV9H,aAAc+H,KCPf,SAASC,GAAmBC,EAA4BC,GACnC,kBAAdD,IAAwBA,EAAY,IAAIE,KAAKF,EAAUtD,QAAQ,KAAM,MAAMyD,UAAU,KAC/F,IAAMC,EAAOC,KAAKC,IAAIL,EAAMD,GAE5B,GAAII,EAAO,GACP,MAAO,CACHtJ,IAAK,YAIb,GAAIsJ,EAAO,KAAM,CACb,IAAMG,EAAUF,KAAKG,MAAMJ,EAAO,IAElC,MAAO,CACHtJ,IAAK,eACLsF,MAAOmE,EACPpE,SAAU,CACNC,MAAOmE,EAAQjD,aAK3B,GAAI8C,EAAO,MAAO,CACd,IAAMK,EAAQJ,KAAKG,MAAMJ,EAAO,MAChC,MAAO,CACHtJ,IAAK,aACLsF,MAAOqE,EACPtE,SAAU,CACNC,MAAOqE,EAAMnD,aAMzB,MAAO,CACHxG,IAAK,YACLqF,SAAU,CACNuE,KAJG,IAAIR,KAAe,IAAVF,GAAgBW,mBAAmBlK,EAAmB8I,GAAMnJ,YAAa,CAACiH,KAAM,UAAWuD,MAAO,OAAQC,IAAK,c,wBCvB1HC,GAA0B,SAAC,GAAY,IAAX5G,EAAU,EAAVA,KAC/BgC,EAAKD,KACLjF,EAAW6E,KACXf,EAAUiB,GAAeJ,IAE/B,OACI,sBAAK/G,UAAWQ,KAAO8E,KAAvB,UACI,sBAAKtF,UAAWQ,KAAOqJ,OAAvB,UACI,cAAC,GAAD,CAAQ9F,IAAKuB,EAAK6G,OAAO/B,kBAAmBtB,KAAM,UAClD,sBAAK9I,UAAWQ,KAAO4L,KAAvB,UACI,qBAAKpM,UAAWQ,KAAOiC,KAAvB,mBACS6C,EAAK6G,OAAOE,WADrB,YACmC/G,EAAK6G,OAAOG,aAE/C,qBAAKtM,UAAWQ,KAAO+L,KAAvB,SACKjF,EAAG6D,GAAmB7F,EAAKkH,WAAYlB,KAAKD,aAGrD,qBAAKrL,UAAWQ,KAAOiM,KAAOtM,QAAS,YACzB,OAAP+F,QAAO,IAAPA,OAAA,EAAAA,EAASrC,YAAayB,EAAK6G,OAAOtI,UACjCzB,EAAS8C,EAAcI,EAAKP,MAFpC,SAKI,mBAAG/E,UAAU,wBAGrB,sBAAKA,UAAWQ,KAAOkM,QAAvB,YACOpH,EAAKqH,OAAO/K,QAAU,qBAAK5B,UAAWQ,KAAOV,OAAvB,SACrB,qBAAKqJ,IAAK7D,EAAKqH,OAAO,GAAG5I,IAAK/D,UAAWQ,KAAOoM,MAAOvD,IAAI,mBAE9D/D,EAAKuH,aAAe,qBAAK7M,UAAWQ,KAAOqM,YAAvB,SAAqCvH,EAAKuH,iBAEnE,sBAAK7M,UAAWQ,KAAO+H,OAAvB,UACI,cAAC,GAAD,CAAUuE,KAAK,OAAOpI,KAAMY,EAAKyH,YAAYrE,WAAYsE,MAAO1H,EAAK2H,SAAU9M,QAAS,kBAAMiC,EAASkD,EAAK2H,SAAWhI,EAAYK,EAAKP,IAAMC,EAASM,EAAKP,QAC5J,cAAC,GAAD,CAAU+H,KAAK,WAAWpI,KAAK,MAC/B,qBAAK1E,UAAWQ,KAAOuJ,YACvB,sBAAK/J,UAAWQ,KAAO0M,MAAvB,UAA+B5F,EAAG,cAAlC,IAAiD,mBAAGtH,UAAU,8BAaxEmN,GAAmC,SAAC,GAA0C,IAAD,EAAxCL,EAAwC,EAAxCA,KAAMpI,EAAkC,EAAlCA,KAAkC,IAA5BsI,aAA4B,SAAb7M,EAAa,EAAbA,QAClE,OACI,uBAAMH,UAAWQ,KAAO4M,SAAUjN,QAASA,EAA3C,UACI,mBAAGH,UAAWO,KAAU,GACpB,MAAQ,GADY,6BAEXuM,IAAS,GAFE,cAGnBtM,KAAOwM,MAAQA,GAHI,MAMxB,sBAAMhN,UAAWQ,KAAOkE,KAAxB,SAA+BA,Q,oBC5D9B2I,GAAqC,SAAC,GAAgB,IAAfxJ,EAAc,EAAdA,SAC1CzB,EAAW6E,KAEjBqG,qBAAU,WACNlL,EAASwC,EAAcf,MACxB,CAACA,EAAUzB,IAEd,IAAM0D,EAAQsB,YAAYvB,GAE1B,OACI,qBAAK7F,UAAWQ,KAAO+M,KAAvB,SACI,qBAAKvN,UAAWQ,KAAOgN,SAAvB,SACK1H,EAAMoE,KAAI,SAAA5E,GAAI,OAAI,cAAC,GAAD,CAAwBA,KAAMA,GAAfA,EAAKP,Y,qECZ1C0I,GAA6B,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,OAAQC,EAAyC,EAAzCA,eAAgB3N,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,SAC3E,OACI,cAAC,IAAD,CAAYD,UAAWO,IAAWC,KAAOoN,MAAO5N,GAAY6N,iBAAkBrN,KAAOsN,QAASJ,OAAQA,EAAQC,eAAgBA,EAA9H,SACK1N,K,oBCFA8N,GAAmC,SAAC,GAAqD,IAApDC,EAAmD,EAAnDA,MAAOC,EAA4C,EAA5CA,YAAajO,EAA+B,EAA/BA,UAAckO,EAAiB,mDACjG,OACI,wBAAOlO,UAAWO,IAAW,eACxBC,KAAO2N,UAAW,GAChBnO,GAFP,UAGKgO,EACD,sCAAUC,YAAaA,GAAiBC,Q,oBCD9CE,GAAOC,KAAK,CACdC,aAAc,CACVC,iBAAkB,EAClBC,iBAAkB,CAAC,cAI3BJ,GAAKK,IAAIC,KAAO,CACZC,aAAcvL,IAGX,IAAMwL,GAAiC,SAAC,GAAwC,IAAD,IAArCC,cAAqC,SAArBlB,EAAqB,EAArBA,eACvDrG,EAAKD,KACLjF,EAAW6E,KAFiE,EAI5CyC,mBAAS,IAJmC,oBAI3EmD,EAJ2E,KAI9DiC,EAJ8D,KAalF,OAPAxB,qBAAU,WACDuB,GAEDC,EAAe,MAEpB,CAACD,IAGA,eAAC,GAAD,CAAO7O,UAAWQ,KAAOuO,QAASrB,OAAQmB,EAAQlB,eAAgBA,EAAlE,UACI,cAAC,KAAD,CACIS,KAAMA,GACNY,OAAQ,CAAElO,QAAS,CAAEmO,WAAY3H,EAAG,qBAExC,cAAC,GAAD,CACItH,UAAWQ,KAAOqM,YAClBqC,KAAM,EACNjB,YAAa3G,EAAG,oCAChB0G,MAAO1G,EAAG,wBACV6H,SAAU,SAAAzO,GAAE,OAAIoO,EAAepO,EAAG0O,cAAcxH,QAChDA,MAAOiF,IAEX,sBAAK7M,UAAWQ,KAAO6O,QAAvB,UACI,cAAC,EAAD,CAAQxP,aAAW,EAACM,QAASwN,EAA7B,SAA8CrG,EAAG,oBACjD,cAAC,EAAD,CAAQ1H,MAAM,OAAOO,QAAO,uCAAE,WAAMO,GAAN,2BAAAY,EAAA,sEAEL8M,GAAKkB,SAFA,OAEpBC,EAFoB,OAG1BC,QAAQC,IAAIF,GACRA,EAAOG,WAAW9N,QAEZqC,EAAOsL,EAAOG,WAAW,GAAGzL,KAC5B0L,EAAOJ,EAAOG,WAAW,GAAGC,KAC5BzN,EAAeyN,EAAazN,IAC5B0N,EAAU1N,EAAI2N,MAAM,KAAK,GACzB9K,EAAK7C,EAAI2N,MAAM,KAAK,GACpBxK,EAAkC,CACpCwH,cACAiD,kBAAmB,CACf,CACIlD,MAAO,CACH7H,GAAIA,EACJ6K,QAASA,EACTG,SAAU,CACNC,SAAUL,EAAKlN,KACfqG,KAAM7E,EAAK6E,KACXmH,UAAWhM,EAAKiM,UAOpC9N,EAASgD,EAAcC,IACT,OAAdsI,QAAc,IAAdA,KAAiBjN,IACmB,IAA7B6O,EAAOG,WAAW9N,QAAyC,IAAzB2N,EAAOY,OAAOvO,QACnDiL,IACAzK,EAASgD,EAAc,CACnByH,cACAiD,kBAAmB,MAET,OAAdnC,QAAc,IAAdA,KAAiBjN,IApCC,2CAAF,sDAA5B,SAwCI4G,EAAG,0B,oBCpFV8I,GAA6B,SAAC,GAAsE,IAArEpC,EAAoE,EAApEA,MAAOC,EAA6D,EAA7DA,YAA8BjO,GAA+B,EAAhD8M,KAAgD,EAA1CuD,UAA0C,EAA/BrQ,WAAckO,EAAiB,sEAC5G,OACI,wBAAOlO,UAAWO,IAAW,eACxBC,KAAO8P,OAAQ,GACbtQ,GAFP,UAGKgO,EACD,mCAAOC,YAAaA,GAAiBC,Q,oBCHpCqC,GAAyC,SAAC,GAAwC,IAAD,IAArC1B,cAAqC,SAArBlB,EAAqB,EAArBA,eAC/DrG,EAAKD,KACLjF,EAAW6E,KAEXf,EAAUiB,GAAeJ,IAJ2D,EAMxD2C,mBAAQ,OAACxD,QAAD,IAACA,OAAD,EAACA,EAASmG,YANsC,oBAMnFmE,EANmF,KAMxEC,EANwE,OAOtD/G,mBAAQ,OAACxD,QAAD,IAACA,OAAD,EAACA,EAASoG,WAPoC,oBAOnFoE,EAPmF,KAOvEC,EAPuE,OAQ1DjH,mBAAQ,OAACxD,QAAD,IAACA,OAAD,EAACA,EAAS0K,WARwC,oBAQnFC,EARmF,KAQzEC,EARyE,OASpDpH,mBAAQ,OAACxD,QAAD,IAACA,OAAD,EAACA,EAAS2G,aATkC,oBASnFA,EATmF,KAStEiC,EATsE,KAW1F,OAAK5I,EASD,eAAC,GAAD,CAAOlG,UAAWQ,KAAOuQ,YAAarD,OAAQmB,EAAQlB,eAAgBA,EAAtE,UACI,sBAAK3N,UAAWQ,KAAOqJ,OAAvB,UACI,qBAAK7J,UAAWQ,KAAOwQ,MAAvB,SACK1J,EAAG,wBAER,qBAAKtH,UAAWQ,KAAOkG,OAAQvG,QAAS,SAAAO,GACpC0B,EAASsE,MACK,OAAdiH,QAAc,IAAdA,KAAiBjN,IAFrB,SAIK4G,EAAG,uBAGZ,sBAAKtH,UAAWQ,KAAOyQ,SAAvB,UACI,cAAC,GAAD,CAAQlN,IAAKmC,EAAQkE,kBAAmBtB,KAAK,SAC7C,sBAAK9I,UAAWQ,KAAOiC,KAAvB,UACI,cAAC,GAAD,CACIzC,UAAWQ,KAAO8P,MAClBtC,MAAO1G,EAAG,2BACV2G,YAAa3G,EAAG,uCAChBM,MAAO4I,EACPrB,SAAU,SAAAzO,GAAE,OAAI+P,EAAa/P,EAAG0O,cAAcxH,UAElD,cAAC,GAAD,CACI5H,UAAWQ,KAAO8P,MAClBtC,MAAO1G,EAAG,4BACV2G,YAAa3G,EAAG,wCAChBM,MAAO8I,EACPvB,SAAU,SAAAzO,GAAE,OAAIiQ,EAAcjQ,EAAG0O,cAAcxH,gBAI3D,cAAC,GAAD,CACI5H,UAAWQ,KAAO8P,MAClBtC,MAAO1G,EAAG,0BACV2G,YAAa3G,EAAG,sCAChBM,MAAOiJ,EACP1B,SAAU,SAAAzO,GAAE,OAAIoQ,EAAYpQ,EAAG0O,cAAcxH,UAEjD,cAAC,GAAD,CACI5H,UAAWO,IAAWC,KAAO8P,MAAO9P,KAAOqM,aAC3CmB,MAAO1G,EAAG,4BACV2G,YAAa3G,EAAG,wCAChBM,MAAOiF,EACPsC,SAAU,SAAAzO,GAAE,OAAIoO,EAAepO,EAAG0O,cAAcxH,UAGpD,sBAAK5H,UAAWQ,KAAO6O,QAAvB,UACI,cAAC,EAAD,CAAQxP,aAAW,EAACM,QAASwN,EAA7B,SAA8CrG,EAAG,oBACjD,cAAC,EAAD,CAAQ1H,MAAM,OAAOO,QAAS,SAAAO,GAC1B,IAAM2E,EAAgC,eAAOa,GAC7Cb,EAAOgH,WAAamE,EACpBnL,EAAOiH,UAAYoE,EACnBrL,EAAOuL,UAAYC,EACnBxL,EAAOwH,YAAcA,EAErBzK,EAASgE,GAAcf,IACT,OAAdsI,QAAc,IAAdA,KAAiBjN,IARrB,SASI4G,EAAG,wBAhEX,cAAC,GAAD,CAAOtH,UAAWQ,KAAOuQ,YAAarD,OAAQmB,EAAQlB,eAAgBA,EAAtE,4B,oBCpBCuD,GAAsD,SAAC,GAA4B,IAA3BpK,EAA0B,EAA1BA,QAA0B,IAAjBqK,WAAiB,SACrF7J,EAAKD,KADgF,EAE/CqC,oBAAS,GAFsC,oBAEpF0H,EAFoF,KAEnEC,EAFmE,OAGvC3H,oBAAS,GAH8B,oBAGpF4H,EAHoF,KAG/DC,EAH+D,KAK3F,OACI,sBAAKvR,UAAWQ,KAAOgR,YAAvB,UACI,sBAAKxR,UAAWQ,KAAOiR,IAAvB,UACI,sBAAKzR,UAAWQ,KAAOkR,UAAvB,UACI,qBAAK1R,UAAWQ,KAAOmR,OAAvB,SAAgC7K,EAAQ4K,YACxC,qBAAK1R,UAAWQ,KAAOoR,UAAvB,SAAmCtK,EAAG,oBAAqB,GAAIR,EAAQ4K,gBAE3E,cAAC,GAAD,CAAQ3N,IAAK+C,EAAQsD,kBAAmBrB,QAAM,EAACD,KAAK,QACpD,sBAAK9I,UAAWQ,KAAOqR,UAAvB,UACI,qBAAK7R,UAAWQ,KAAOmR,OAAvB,SAAgC7K,EAAQ+K,YACxC,qBAAK7R,UAAWQ,KAAOoR,UAAvB,SAAmCtK,EAAG,6BAG9C,sBAAKtH,UAAWQ,KAAOsR,OAAvB,UACI,qBAAK9R,UAAWQ,KAAO4L,KAAvB,mBACQtF,EAAQuF,WADhB,YAC8BvF,EAAQwF,UADtC,cACqDxF,EAAQ8J,aAE7D,qBAAK5Q,UAAWQ,KAAOqM,YAAvB,SACK/F,EAAQ+F,cAEZsE,GAAO,sBAAKnR,UAAWQ,KAAOuR,cAAvB,UACJ,cAAC,EAAD,CAAQ7R,cAAY,EAACC,QAAS,kBAAMoR,GAAqB,IAAzD,SAAiEjK,EAAG,kBACpE,cAAC,EAAD,CAAQpH,cAAY,EAACN,MAAM,OAAOO,QAAS,kBAAMkR,GAAiB,IAAlE,SAA0E/J,EAAG,oBAGrF,cAAC,GAAD,CAASuH,OAAQuC,EAAiBzD,eAAgB,kBAAM0D,GAAiB,MACzE,cAAC,GAAD,CAAaxC,OAAQyC,EAAqB3D,eAAgB,kBAAM4D,GAAqB,U,oBClCpFS,GAAoB,WAE7B,IAAM5P,EAAW6E,KAEjBqG,qBAAU,WACNlL,EAAS4D,QACV,CAAC5D,IAEJ,IAAM6P,EAAW9K,GAAeN,IAEhC,OACI,qBAAK7G,UAAWQ,KAAO0R,OAAvB,SACKD,EAA0D/H,KAAI,SAAApD,GAAO,OAAI,cAAC,GAAD,CAA+B/C,IAAK+C,EAAQsD,kBAAmBtB,KAAM,MAAOC,QAAM,GAArEjC,EAAQjD,gB,oBCgB5FsO,GAtBE,WACb,IAAM3I,EAAarC,GAAeH,IAC5Bd,EAAUiB,GAAeJ,IAC/B,OACI,sBAAK/G,UAAWQ,KAAO+I,KAAvB,UACI,cAAC,GAAD,CAAQA,MAAI,EAACzC,SAAO,IACpB,sBAAK9G,UAAWQ,KAAOkM,QAAvB,UACI,sBAAK1M,UAAWQ,KAAO4R,KAAvB,UACI,cAAC,GAAD,IACA,cAAC,GAAD,OAEJ,qBAAKpS,UAAWQ,KAAO6R,MAAvB,SACI,sBAAKrS,UAAWQ,KAAO8R,OAAvB,UACM9I,EAAa,cAAC,GAAD,CAAa1C,QAASZ,EAASiL,KAAG,IAAI,cAAC,EAAD,CAAQvR,MAAM,QAAQG,GAAG,SAAzB,mBACrD,cAAC,GAAD,gB,oBC6DTwS,GA7EG,WACd,IAAMjL,EAAKD,KACLhH,EAAUC,cACV8B,EAAW6E,KAEXf,EAAUiB,GAAeJ,IAE/BuG,qBAAU,WACHpH,GAAS7F,EAAQyH,QAAQ,OAC7B,CAAC5B,EAAS7F,IATO,MAWQqJ,oBAAS,GAXjB,oBAWb8I,EAXa,KAWLC,EAXK,OAaM/I,mBAAS,IAbf,oBAabgJ,EAba,KAaNC,EAbM,OAcYjJ,mBAAS,IAdrB,oBAcb7F,EAda,KAcH+O,EAdG,OAeYlJ,mBAAS,IAfrB,oBAebmJ,EAfa,KAeHC,EAfG,KAiBpB,OACI,sBAAK9S,UAAWQ,KAAOuS,MAAvB,UACI,cAAC,GAAD,IACA,sBAAK/S,UAAWQ,KAAOkM,QAAvB,UACI,qBAAK1M,UAAWQ,KAAOwS,aAAvB,6BAGA,sBAAKhT,UAAWQ,KAAOyS,SAAvB,UACI,qBAAKjT,UAAWQ,KAAOwQ,MAAvB,SAA+B1J,EAAGkL,EAAS,gBAAkB,iBAE7D,cAAC,GAAD,CACIxE,MAAO1G,EAAG,2BACV2G,YAAa3G,EAAG,iCAChB4I,KAAK,QACLlQ,UAAWQ,KAAO8P,MAClBnB,SAAU,SAAAzO,GAAE,OAAIiS,EAASjS,EAAG0O,cAAcxH,QAC1CA,MAAO8K,IAEVF,GAAU,cAAC,GAAD,CACPxE,MAAO1G,EAAG,8BACV2G,YAAa3G,EAAG,oCAChBtH,UAAWQ,KAAO8P,MAClBnB,SAAU,SAAAzO,GAAE,OAAIkS,EAAYlS,EAAG0O,cAAcxH,QAC7CA,MAAO/D,IAEX,cAAC,GAAD,CACImK,MAAO1G,EAAG,8BACV2G,YAAa3G,EAAG,oCAChB4I,KAAK,WACLlQ,UAAWQ,KAAO8P,MAClBnB,SAAU,SAAAzO,GAAE,OAAIoS,EAAYpS,EAAG0O,cAAcxH,QAC7CA,MAAOiL,IAGX,cAAC,EAAD,CAAQjT,MAAM,OAAOO,QAAS,WpBf3C,IAAuB8D,EoBiBHuO,GpBjBGvO,EoBkBY,CAAC8O,MAAOL,EAAOG,WAAUhP,YpBjBxD/B,MAAM,GAAD,OAAIsB,EAAJ,mBAA+B,CACvCY,OAAQ,OACRK,KAAMC,KAAKC,UAAUN,GACrBE,QAAS,IAAIC,QAAQ,CACjB,eAAgB,uBAErBrC,MAAK,SAAAC,GACJ,IACMwC,EADUxC,EAAImC,QACC+O,IAAI,iBAMzB,OALG1O,EACCxD,aAAamB,QAAQ,OAAQqC,GAE7BxD,aAAa2F,WAAW,QAErB3E,EAAIC,WoBIcF,MAAK,kBAAMK,EAAS6D,SACpBlE,MAAK,kBAAM1B,EAAQM,KAAK,QpBDlD,SAAesD,GAClB,OAAOnC,MAAM,GAAD,OAAIsB,EAAJ,UAAsB,CAC9BY,OAAQ,OACRK,KAAMC,KAAKC,UAAUN,GACrBE,QAAS,IAAIC,QAAQ,CACjB,eAAgB,uBAErBrC,MAAK,SAAAC,GACJ,IACMwC,EADUxC,EAAImC,QACC+O,IAAI,iBAMzB,OALG1O,EACCxD,aAAamB,QAAQ,OAAQqC,GAE7BxD,aAAa2F,WAAW,QAErB3E,EAAIC,UoBZS8Q,CAAM,CAACA,MAAOL,EAAOG,aAChB9Q,MAAK,kBAAMK,EAAS6D,SACpBlE,MAAK,kBAAM1B,EAAQM,KAAK,SATrC,SAYK2G,EAAGkL,EAAS,uBAAyB,wBAE1C,sBAAKxS,UAAWQ,KAAO2S,OAAvB,UACK7L,EAAGkL,EAAS,qBAAuB,oBACpC,sBAAMxS,UAAWQ,KAAO4S,aAAcjT,QAAS,kBAAMsS,GAAWD,IAAhE,SACKlL,EAAGkL,EAAQ,cAAgB,gCCpEzCa,GARQ,WACnB,OACI,gDCkBOC,GAZK,WAAO,IAChBzP,EAA2B0P,cAA3B1P,SACD3C,EAASiG,GAAepB,IAE9B,OACI,gDACS7E,EACT,cAAC,GAAD,CAAW2C,SAAUA,QC6Bd2P,OAlCf,WACI,IpBC2BC,EoBDrBrR,EAAW6E,KACXlG,EAAOoG,GAAetF,GAS5B,OpBT2B4R,EoBGZ,WACXrR,EAASjB,EAAYJ,IAElBC,aAAaC,QAAQ,SAASmB,EAAS6D,OpBNKqH,oBAAUmG,EAAK,IoBU9D,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,SAAZ,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAOA,KAAK,qBAAZ,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAOC,OAAK,EAACD,KAAK,WAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAOC,OAAK,EAACD,KAAK,IAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,UACI,cAAC,IAAD,CAAU3T,GAAG,c,OC3Bb6T,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUxJ,MAAOA,GAAjB,SACI,cAAC,GAAD,QAGNyJ,SAASC,eAAe,QAG1B5G,IAAM6G,cAAc,QDsHd,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1S,MAAK,SAAC2S,GACLA,EAAaC,gBAEdC,OAAM,SAACzO,GACNqJ,QAAQrJ,MAAMA,EAAM0O,a,mBE7I5BpV,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,QAAU,uBAAuB,aAAe,4BAA4B,SAAW,wBAAwB,MAAQ,qBAAqB,MAAQ,qBAAqB,OAAS,sBAAsB,aAAe,8B,mBCAtQD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,KAAO,qBAAqB,UAAY,0BAA0B,OAAS,uBAAuB,SAAW,yBAAyB,OAAS,uBAAuB,aAAe,6BAA6B,SAAW,2B,mBCA/QD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,OAAS,uBAAuB,aAAe,6BAA6B,MAAQ,sBAAsB,KAAO,qBAAqB,MAAQ,sBAAsB,YAAc,8B,mBCApOD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,QAAU,sBAAsB,KAAO,mBAAmB,MAAQ,oBAAoB,OAAS,uB,mBCA3ID,EAAOC,QAAU,CAAC,OAAS,uBAAuB,UAAY,0BAA0B,WAAa,6B,mBCArGD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,OAAS,uBAAuB,QAAU,wBAAwB,OAAS,yB,mBCA7HD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,QAAU,2B,mBCA1GD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,SAAW,8B,mBCA5DD,EAAOC,QAAU,CAAC,QAAU,uBAAuB,MAAQ,uB,mBCA3DD,EAAOC,QAAU,CAAC,SAAW,6B,mBCA7BD,EAAOC,QAAU,CAAC,MAAQ,uB,mBCA1BD,EAAOC,QAAU,CAAC,OAAS,iC","file":"static/js/main.a7953a34.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"FeedPost_post__38L69\",\"header\":\"FeedPost_header__xfS1t\",\"info\":\"FeedPost_info__2jKSq\",\"name\":\"FeedPost_name__s5-LB\",\"time\":\"FeedPost_time__wHx6V\",\"more\":\"FeedPost_more__1F8dQ\",\"content\":\"FeedPost_content__bqJzD\",\"square\":\"FeedPost_square__2oSJq\",\"image\":\"FeedPost_image__3GYFu\",\"description\":\"FeedPost_description__dY6jO\",\"footer\":\"FeedPost_footer__3nUDA\",\"iconText\":\"FeedPost_iconText__3DHXK\",\"liked\":\"FeedPost_liked__1hrUk\",\"text\":\"FeedPost_text__390dQ\",\"separator\":\"FeedPost_separator__2L6kG\",\"share\":\"FeedPost_share__EP4GG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileEdit\":\"ProfileEdit_profileEdit__1uQK8\",\"header\":\"ProfileEdit_header__3HIcq\",\"title\":\"ProfileEdit_title___RCsW\",\"logout\":\"ProfileEdit_logout__1f44K\",\"topBlock\":\"ProfileEdit_topBlock__2dazQ\",\"name\":\"ProfileEdit_name__seHSk\",\"input\":\"ProfileEdit_input__2Pm0b\",\"description\":\"ProfileEdit_description__Kg-eY\",\"buttons\":\"ProfileEdit_buttons__2HaGI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__11X92\",\"top\":\"ProfileInfo_top__3ie3N\",\"followers\":\"ProfileInfo_followers__ZJw_h\",\"following\":\"ProfileInfo_following__1E8yz\",\"smallText\":\"ProfileInfo_smallText__2OyCY\",\"bottom\":\"ProfileInfo_bottom__209ya\",\"info\":\"ProfileInfo_info__1n3_8\",\"description\":\"ProfileInfo_description__3tPjY\",\"actionButtons\":\"ProfileInfo_actionButtons__1xtPw\"};","import classNames from \"classnames\";\nimport { FC } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport styles from \"./Button.module.scss\";\n\ninterface ButtonParameters extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n    color?: \"blue\" | \"black\" | \"white\"\n    lightBorder?: boolean\n    square?: boolean\n    smallPadding?: boolean\n    className?: string\n    to?: string\n    [key: string]: any\n}\n\nexport const Button: FC<ButtonParameters> = (\n    {\n        color = \"white\",\n        lightBorder = false,\n        square = false, \n        to,\n        className,\n        children,\n        smallPadding = false,\n        onClick,\n        ...otherArgs\n    }) => {\n    const history = useHistory();\n\n    return (\n        <button className={classNames({\n            [styles.button]: true,\n            [styles[color]]: true,\n            [styles.square]: square,\n            [styles.lightBorder]: lightBorder,\n            [styles.smallPadding]: smallPadding\n        }, className)}\n            onClick={ev => {\n                onClick?.(ev);\n                if (to) history.push(to);\n            }}\n            {...otherArgs}>\n            {children}\n        </button>\n    )\n}","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store\";\nimport { LanguageValue } from \"../types\";\n\nexport const LANGUAGE_FOLDER = \"language\";\n\nexport const VALID_LANGUAGES: { [key: string]: string } = {\n    \"uk\": \"UA\",\n    \"en\": \"EN\"\n}\n\nexport interface StringsMap {\n    [key: string]: string | LanguageValue\n}\n\nexport interface LocalizationState {\n    strings: StringsMap\n    code: string\n    status: \"idle\" | \"loading\" | \"failed\";\n}\n\nconst initialState: LocalizationState = {\n    strings: {},\n    code: localStorage.getItem(\"langCode\") || \"en\",\n    status: \"idle\",\n}\n\nexport const setLanguage = createAsyncThunk(\n    \"localization/setLanguage\",\n    async (code: string, thunkAPI) => {\n        if (code in VALID_LANGUAGES) {\n            const state = thunkAPI.getState() as RootState;\n            const strings = selectTranslationStrings(state);\n            if(Object.keys(strings).length && code === selectLanguageCode(state)) {\n                return strings; // don't make request to fetch active language\n            }\n            \n            return fetch(`${LANGUAGE_FOLDER}/${code}.json`)\n                .then(res => res.json())\n                .then(json => {\n                    let strings: StringsMap = {};\n                    for (let key in json) {\n                        strings[key] = json[key];\n                    }\n\n                    localStorage.setItem(\"langCode\", code);\n                    thunkAPI.dispatch(setLanguageCode(code));\n\n                    return strings;\n                });\n        } else {\n            throw new Error(\"Not a valid language!\");\n        }\n    }\n);\n\nconst localizationSlice = createSlice({\n    name: \"localization\",\n    initialState,\n    reducers: {\n        setLanguageCode(state, action: PayloadAction<string>) {\n            state.code = action.payload\n        }\n    },\n    extraReducers: (builder) => {\n        builder.addCase(setLanguage.pending, (state) => {\n            state.status = \"loading\";\n        }).addCase(setLanguage.fulfilled, (state, action) => {\n            state.status = \"idle\";\n            state.strings = action.payload;\n        })\n    },\n})\n\n// Reducer\nexport default localizationSlice.reducer;\n\n// Actions\nconst { setLanguageCode } = localizationSlice.actions;\n\n//Selectors\n\nexport const selectLanguageCode = (state: RootState) => state.localization.code;\nexport const selectTranslationStrings = (state: RootState) => state.localization.strings;","import { IComment, IImage, IPhotosAttribute, IPost, IProfile } from \"../types\";\n\nexport const API_BASE = \"https://linkstagram-api.ga\";\n\n// API-SPECIFIC TYPES\n\nexport interface ILoginError {\n    \"field-error\": string[],\n    error: string\n}\n\nexport interface ISuccess {\n    success: string\n}\n\nexport interface IError {\n    error: string\n}\n\nexport interface IRegistrationParameters {\n    username: string;\n    login: string;\n    password: string;\n}\n\nexport interface ILoginParameters {\n    login: string;\n    password: string;\n}\n\nexport interface IPostCreationParameters {\n    description?:       string;\n    photos_attributes: IPhotosAttribute[];\n}\n\nexport interface IProfileUpdateParameters {\n    username?:          string;\n    description?:       string;\n    first_name?:        string;\n    job_title?:         string;\n    last_name?:         string;\n    profile_photo?:     IImage;\n}\n\n// AUTH\n\nexport function createAccount(data: IRegistrationParameters): Promise<ILoginError | ISuccess> {\n    return fetch(`${API_BASE}/create-account`, {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: new Headers({\n            \"Content-Type\": \"application/json\"\n        })\n    }).then(res => {\n        const headers = res.headers;\n        const auth = headers.get(\"authorization\");\n        if(auth) {\n            localStorage.setItem(\"auth\", auth);\n        } else {\n            localStorage.removeItem(\"auth\"); // login error, clear previous auth\n        }\n        return res.json();\n    });\n}\n\nexport function login(data: ILoginParameters): Promise<ILoginError | ISuccess> {\n    return fetch(`${API_BASE}/login`, {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: new Headers({\n            \"Content-Type\": \"application/json\"\n        })\n    }).then(res => {\n        const headers = res.headers;\n        const auth = headers.get(\"authorization\");\n        if(auth) {\n            localStorage.setItem(\"auth\", auth);\n        } else {\n            localStorage.removeItem(\"auth\"); // login error, clear previous auth\n        }\n        return res.json();\n    });\n}\n\n// COMMENTS\n\nexport function leaveComment(post_id: number, message: string): Promise<IComment> {\n    return request(`${API_BASE}/posts/${post_id}/comments`, \"POST\", {message});\n}\n\nexport function fetchComments(post_id: number): Promise<IComment[]> {\n    return request(`${API_BASE}/posts/${post_id}/comments`);\n}\n\n// ACCOUNT\n\nexport function fetchAccount(): Promise<IProfile | IError> {\n    return request(`${API_BASE}/account`);\n}\n\nexport function editAccount(account: IProfileUpdateParameters): Promise<IProfile | IError> {\n    return request(`${API_BASE}/account`, \"PATCH\", {account});\n}\n\n// LIKES\n\nexport function removeLike(post_id: number): Promise<{}> {\n    return request(`${API_BASE}/posts/${post_id}/like`, \"DELETE\");\n}\n\nexport function setLike(post_id: number): Promise<{}> {\n    return request(`${API_BASE}/posts/${post_id}/like`, \"POST\");\n}\n\n// POSTS\n\nexport function createPost(post: IPostCreationParameters): Promise<IPost> {\n    return request(`${API_BASE}/posts`, \"POST\", {post});\n}\n\nexport function deletePost(id: number): Promise<ISuccess | IError> {\n    return request(`${API_BASE}/posts/${id}`, \"DELETE\");\n}\n\nexport function fetchPost(id: number): Promise<IPost> {\n    return request(`${API_BASE}/posts/${id}`);\n}\n\nexport function fetchPosts(page: number = 1): Promise<IPost[]> {\n    return request(`${API_BASE}/posts?page=${page}`);\n}\n\nexport function fetchUserPosts(username: string): Promise<IPost[]> {\n    return request(`${API_BASE}/profiles/${username}/posts`);\n}\n\n// PROFILES\n\nexport function fetchProfiles(page: number = 1): Promise<IProfile[]> {\n    return request(`${API_BASE}/profiles?page=${page}`);\n}\n\nexport function fetchProfile(username: string): Promise<IProfile> {\n    return request(`${API_BASE}/profiles/${username}`);\n}\n\n// UTIL\n\nfunction request(url: string, method: \"GET\" | \"POST\" | \"PATCH\" | \"DELETE\" = \"GET\", data: any = null): Promise<any> {\n    let options: RequestInit = {\n        method\n    };\n\n    options.headers = new Headers({\n        \"Content-Type\": \"application/json\"\n    })\n    \n    if(data) {\n        options.body = JSON.stringify(data);\n    }\n\n    const auth = localStorage.getItem(\"auth\");\n    if(auth) {\n        options.headers.set(\"Authorization\", \"Bearer \"+ auth);\n    }\n    return fetch(url, options).then(res => res.text()).then(text => {\n        if(text.length === 0) return {}\n        return JSON.parse(text);\n    });\n}","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store\";\nimport { IPost } from \"../types\";\nimport { createPost, deletePost, fetchPost, fetchPosts, fetchUserPosts, IPostCreationParameters, removeLike, setLike } from \"../util/api\";\n\nexport interface PostsState {\n    loadedPosts: IPost[];\n    currentPostsUsername: string | null;\n    status: \"idle\" | \"loading\" | \"failed\";\n}\n\nconst initialState: PostsState = {\n    loadedPosts: [],\n    currentPostsUsername: null,\n    status: \"idle\",\n}\n\nexport const fetchAllPosts = createAsyncThunk(\n    \"posts/fetchAllPosts\",\n    async (username: string | null | undefined, thunkAPI) => {        \n        if(username) {\n            thunkAPI.dispatch(setCurrentPostsUsername(username));\n            return fetchUserPosts(username);\n        } else {\n            thunkAPI.dispatch(setCurrentPostsUsername(null));\n            return fetchPosts();\n        }\n    }\n);\n\nexport const refetchPost = createAsyncThunk(\n    \"posts/fetchPost\",\n    async (post_id: number, thunkAPI) => {\n        return fetchPost(post_id);\n    }\n);\n\nexport const likePost = createAsyncThunk(\n    \"posts/like\",\n    async (post_id: number, thunkAPI) => {\n        await setLike(post_id)\n        thunkAPI.dispatch(refetchPost(post_id));\n    }\n);\n\nexport const dislikePost = createAsyncThunk(\n    \"posts/dislike\",\n    async (post_id: number, thunkAPI) => {\n        await removeLike(post_id);\n        thunkAPI.dispatch(refetchPost(post_id));\n    }\n);\n\nexport const deleteOwnPost = createAsyncThunk(\n    \"posts/delete\",\n    async (post_id: number, thunkAPI) => {\n        await deletePost(post_id);\n        thunkAPI.dispatch(removePost(post_id));\n    }\n);\n\nexport const createOwnPost = createAsyncThunk(\n    \"posts/post\",\n    async (params: IPostCreationParameters, thunkAPI) => {\n        await createPost(params);\n\n        // FIXME: post creation throws 500, but creates post, so best way to show it, to refetch first page\n        // btw, should I open Home/Profile after new post, or keep user on the same user page?\n        thunkAPI.dispatch(fetchAllPosts());\n    }\n);\n\nconst postsSlice = createSlice({\n    name: \"posts\",\n    initialState,\n    reducers: {\n        setCurrentPostsUsername(state, action: PayloadAction<string | null>) {\n            state.currentPostsUsername = action.payload\n        },\n        removePost(state, action: PayloadAction<number>) {\n            state.loadedPosts = state.loadedPosts.filter(post => post.id !== action.payload);\n        }\n    },\n    extraReducers: (builder) => {\n        builder\n        .addCase(fetchAllPosts.pending, (state) => {\n            state.status = \"loading\";\n            state.loadedPosts = [];\n        }).addCase(fetchAllPosts.fulfilled, (state, action) => {\n            state.status = \"idle\";\n            state.loadedPosts = action.payload;\n        }).addCase(fetchAllPosts.rejected, (state) => {\n            state.status = \"failed\";\n        })\n        .addCase(refetchPost.fulfilled, (state, action) => {\n            const id = state.loadedPosts.findIndex(post => post.id === action.payload.id);\n            if(id !== -1) { // post is currently in state\n                state.loadedPosts[id] = action.payload;\n            }\n        })\n    },\n})\n\n// Reducer\nexport default postsSlice.reducer;\n\n// Actions\nconst { setCurrentPostsUsername, removePost } = postsSlice.actions;\n\n//Selectors\n\nexport const selectLoadedPosts = (state: RootState) => state.posts.loadedPosts;\nexport const selectPostsStatus = (state: RootState) => state.posts.status;\nexport const selectCurrentPostsUsername = (state: RootState) => state.posts.currentPostsUsername;","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store\";\nimport { IProfile } from \"../types\";\nimport { editAccount, fetchAccount, fetchProfiles, IError, IProfileUpdateParameters } from \"../util/api\";\nimport { fetchAllPosts, selectCurrentPostsUsername } from \"./postsSlice\";\n\nexport interface ProfileState {\n    account: IProfile | null;\n    allProfiles: IProfile[]\n    profilesFetchStatus: \"idle\" | \"loading\" | \"failed\";\n    accountFetchStatus: \"idle\" | \"loading\" | \"failed\";\n}\n\nconst initialState: ProfileState = {\n    account: null,\n    allProfiles: [],\n    profilesFetchStatus: \"idle\",\n    accountFetchStatus: \"idle\"\n}\n\nexport const fetchAllProfiles = createAsyncThunk(\n    \"profile/fetchAllProfiles\",\n    async () => {\n        return fetchProfiles();\n    }\n);\n\nexport const fetchCurrentAccount = createAsyncThunk(\n    \"profile/fetchAccount\",\n    async () => {\n        const account = await fetchAccount();\n        if(isError(account)) {\n            return null;\n        } else {\n            return account;\n        }\n    }\n);\n\nexport const updateAccount = createAsyncThunk(\n    \"profile/updateAccount\",\n    async (newInfo: IProfileUpdateParameters, thunkAPI) => {\n        const res = await editAccount(newInfo);\n        if(\"error\" in res) {\n            throw Error(\"Failed to update account\")\n        } else {\n            thunkAPI.dispatch(fetchAllPosts(selectCurrentPostsUsername(thunkAPI.getState() as RootState)));\n            return res;\n        }\n    }\n);\n\nfunction isError(res: any): res is IError {\n    return !!(res as IError).error;\n}\n\nconst profileSlice = createSlice({\n    name: \"profile\",\n    initialState,\n    reducers: {\n        logout(state) {\n            state.account = null;\n            localStorage.removeItem(\"auth\");\n        },\n\n        resetAccountFetchStatus(state) {\n            state.accountFetchStatus = \"idle\";\n        }\n    },\n    extraReducers: (builder) => {\n        builder\n        // profiles\n        .addCase(fetchAllProfiles.pending, (state) => {\n            state.profilesFetchStatus = \"loading\";\n        }).addCase(fetchAllProfiles.fulfilled, (state, action) => {\n            state.profilesFetchStatus = \"idle\";\n            state.allProfiles = action.payload;\n        }).addCase(fetchAllProfiles.rejected, (state) => {\n            state.profilesFetchStatus = \"failed\";\n            state.allProfiles = [];\n        })\n        // account\n        .addCase(fetchCurrentAccount.pending, (state) => {\n            state.accountFetchStatus = \"loading\";\n        }).addCase(fetchCurrentAccount.fulfilled, (state, action) => {\n            state.accountFetchStatus = \"idle\";\n            state.account = action.payload;\n        }).addCase(fetchCurrentAccount.rejected, (state) => {\n            state.accountFetchStatus = \"failed\";\n            state.account = null;\n        })\n        .addCase(updateAccount.fulfilled, (state, action) => {\n            state.account = action.payload\n        })\n    },\n})\n\n// Reducer\nexport default profileSlice.reducer;\n\n// Actions\nexport const { logout, resetAccountFetchStatus } = profileSlice.actions;\n\n// Selectors\nexport const selectProfiles = (state: RootState) => state.profile.allProfiles;\nexport const selectProfilesFetchStatus = (state: RootState) => state.profile.profilesFetchStatus;\nexport const selectAccount = (state: RootState) => state.profile.account;\nexport const selectAccountFetchStatus = (state: RootState) => state.profile.accountFetchStatus;\nexport const selectIsLoggedIn = (state: RootState) => !!state.profile.account;","import { en, PluralCategory, uk } from \"make-plural\";\nimport { EffectCallback, useEffect } from \"react\";\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from \"react-router-dom\";\nimport { selectLanguageCode, selectTranslationStrings } from '../slices/localizationSlice';\nimport { selectIsLoggedIn } from \"../slices/profileSlice\";\nimport type { AppDispatch, RootState } from '../store';\nimport { LanguageValue, LocalizationParameters } from '../types';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\n// eslint-disable-next-line react-hooks/exhaustive-deps\nexport const useMountEffect = (fun: EffectCallback) => useEffect(fun, []);\n\nexport const useCheckLogin = () => {\n    const loggedIn = useAppSelector(selectIsLoggedIn);\n    const history = useHistory();\n\n    return (func?: Function) => {\n        if(loggedIn) {\n            func?.()\n        } else {\n            history.push(\"/login\");\n        }\n    }\n}\n\nexport const useLocalization = () => {\n    const strings = useAppSelector(selectTranslationStrings);\n    const code = useAppSelector(selectLanguageCode);\n\n    const lp = (key: LocalizationParameters | string = \"NO_TRANSLATION_KEY_PROVIDED\", replaces: {[key: string]: string} = {}, count: number = 1, defaultValue: string | undefined = undefined): string => {\n\t\tif(isLocalizationParameters(key)) return lp(key.key, key.replaces, key.count, key.defaultValue);\n        let value = strings[key];\n\t\tif(!value) {\n\t\t\treturn defaultValue || key;\n\t\t}\n\n\t\tlet found = key;\n\t\tif(isLanguageValue(value)) {\n            found = value[countToPluralCode(code, count)] || value.other; \n\t\t} else {\n\t\t\tfound = value;\n\t\t}\n\n\t\tfor(let replace in replaces) {\n\t\t\tlet replacement = replaces[replace];\n\t\t\tfound = found.replaceAll(`{${replace}}`, replacement);\n\t\t}\n        return found;\n\t}\n\n    return lp;\n}\n\nfunction countToPluralCode(code: string, count: number): PluralCategory {\n    const plurals: {[key: string]: (n: number | string, ord?: boolean) => PluralCategory} = {\n        \"uk\": uk,\n        \"en\": en\n    }\n    return plurals[code](count);\n}\n\nexport function isLocalizationParameters(key: LocalizationParameters | string): key is LocalizationParameters {\n    return (key as string).length === undefined;\n}\n\nexport function isLanguageValue(value: LanguageValue | string): value is LanguageValue {\n    return (value as string).length === undefined;\n}","import { FC } from \"react\";\nimport { useLocalization } from \"../util/hooks\";\nimport styles from \"./Footer.module.scss\";\n\nconst CURRENT_YEAR = 2021;\n\nexport const Footer: FC = () => {\n    const lp = useLocalization();\n\n    return (\n        <footer className={styles.footer}>\n            <div className={styles.buttonRow}>\n                <GreyButton text={lp(\"footer_about\")}/>\n                <GreyButton text={lp(\"footer_help\")}/>\n                <GreyButton text={lp(\"footer_privacy\")}/>\n                <GreyButton text={lp(\"footer_terms\")}/>\n                <GreyButton text={lp(\"footer_locations\")}/>\n                <GreyButton text={lp(\"footer_language\")}/>\n            </div>\n            <div className={styles.buttonRow}>\n                <GreyButton text={lp(\"footer_copyright\", {year: CURRENT_YEAR.toString()})}/>\n            </div>\n        </footer>\n    )\n}\n\nconst GreyButton: FC<{text: string}> = ({text}) => {\n    return <div className={styles.greyButton}>{text}</div>\n}","import classNames from \"classnames\";\nimport { FC } from \"react\";\nimport styles from \"./Avatar.module.scss\";\n\ntype AvatarProps = {\n    url: string,\n    size?: string,\n    border?: boolean\n    className?: string\n}\n\nexport const Avatar: FC<AvatarProps> = ({url, size = \"4em\", border = false, className, ...otherArgs}) => {\n    return (\n        <div className={styles.square} {...otherArgs} style={{width: size}}>\n            <div className={classNames({\n                [styles.border]: true,\n                [styles.visible]: border\n            }, className)}>\n                <img src={url} className={styles.avatar} alt=\"Avatar\"/>\n            </div>\n        </div>\n    )\n}","import classNames from \"classnames\";\nimport { FC, useState } from \"react\";\nimport { selectLanguageCode, setLanguage, VALID_LANGUAGES } from \"../slices/localizationSlice\";\nimport { selectAccount, selectIsLoggedIn } from \"../slices/profileSlice\";\nimport { IProfile } from \"../types\";\nimport { useAppDispatch, useAppSelector, useLocalization } from \"../util/hooks\";\nimport { Avatar } from \"./basic/Avatar\";\nimport { Button } from \"./basic/Button\";\nimport styles from \"./Header.module.scss\";\n\ntype HeaderParameters = {\n    home?: boolean\n    profile?: boolean\n}\n\nexport const Header: FC<HeaderParameters> = ({home = false, profile = false}) => {\n    const dispatch = useAppDispatch();\n\n    const isLoggedIn = useAppSelector(selectIsLoggedIn);\n    const account = useAppSelector(selectAccount) as IProfile;\n\n    const lp = useLocalization();\n    const langCode = useAppSelector(selectLanguageCode);\n\n    const [dropdown, setDropdown] = useState(false);\n\n    return (\n        <>\n        <header className={styles.header}>\n            <div className={styles.logo}>Linkstagram</div>\n            <div className={styles.separator}/>\n            {home && <Button color=\"black\" className={styles.button} to=\"/\">{lp(\"header_home\")}</Button>}\n            <Button color=\"white\" className={styles.button} lightBorder square onClick={() => setDropdown(!dropdown)}>\n                {VALID_LANGUAGES[langCode]}\n                <div className={classNames({\n                    [styles.dropdown]: true,\n                    [styles.hidden]: !dropdown\n                    })} onClick={() => setDropdown(false)}>\n                    {Object.entries(VALID_LANGUAGES).map(([key, value]) => (\n                            <div className={styles.dropdownItem} key={key} onClick={() => dispatch(setLanguage(key))}>\n                                {value}\n                            </div>\n                        )\n                    )}\n                </div>\n            </Button>\n            {profile && isLoggedIn && <Avatar url={account.profile_photo_url} size=\"2.5em\"/>}\n        </header>\n        <div className={styles.reserver}/>\n        </>\n    )\n}","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store\";\nimport { IComment } from \"../types\";\nimport { fetchComments } from \"../util/api\";\n\nexport interface CommentsState {\n    loadedComments: IComment[];\n    currentPostId: number\n    status: \"idle\" | \"loading\" | \"failed\";\n}\n\nconst initialState: CommentsState = {\n    loadedComments: [],\n    currentPostId: -1,\n    status: \"idle\",\n}\n\nexport const fetchAllComments = createAsyncThunk(\n    \"comments/fetchAllPosts\",\n    async (post_id: number, thunkAPI) => {\n        thunkAPI.dispatch(setCurrentPostId(post_id));\n        return fetchComments(post_id);\n    }\n  );\n\nconst commentsSlice = createSlice({\n    name: \"comments\",\n    initialState,\n    reducers: {\n        setCurrentPostId(state, action: PayloadAction<number>) {\n            state.currentPostId = action.payload;\n        }\n    },\n    extraReducers: (builder) => {\n        builder.addCase(fetchAllComments.pending, (state) => {\n            state.status = \"loading\";\n            state.loadedComments = [];\n        }).addCase(fetchAllComments.fulfilled, (state, action) => {\n            state.status = \"idle\";\n            state.loadedComments = action.payload;\n        }).addCase(fetchAllComments.rejected, (state) => {\n            state.status = \"failed\";\n        });\n    },\n})\n\n// Reducer\nexport default commentsSlice.reducer;\n\n// Actions\nconst { setCurrentPostId } = commentsSlice.actions;\n\n//Selectors\n\nexport const selectLoadedComments = (state: RootState) => state.comments.loadedComments;\nexport const selectCommentsStatus = (state: RootState) => state.comments.status;\nexport const selectCurrentCommentsPostId = (state: RootState) => state.comments.currentPostId;","import { Action, configureStore, ThunkAction } from \"@reduxjs/toolkit\";\nimport commentsReducer from \"./slices/commentsSlice\";\nimport localizationReducer from \"./slices/localizationSlice\";\nimport postsReducer from \"./slices/postsSlice\";\nimport profileReducer from \"./slices/profileSlice\";\n\nconst store = configureStore({\n    reducer: {\n        posts: postsReducer,\n        profile: profileReducer,\n        comments: commentsReducer,\n        localization: localizationReducer,\n    },\n})\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n\nexport default store;","import { selectLanguageCode } from \"../slices/localizationSlice\";\nimport store from \"../store\";\nimport { LocalizationParameters } from \"../types\";\n\nexport function getRelativeDateKey(timestamp: number | string, now: number): LocalizationParameters {\n    if(typeof timestamp === \"string\") timestamp = new Date(timestamp.replace(/-/g, \"/\")).getTime()/1000; // Safari can't read standard format\n    const diff = Math.abs(now - timestamp)\n\n    if (diff < 60) {\n        return {\n            key: \"date_now\"\n        }\n    }\n\n    if (diff < 3600) {\n        const minutes = Math.floor(diff / 60);\n\n        return {\n            key: \"date_minutes\",\n            count: minutes,\n            replaces: {\n                count: minutes.toString()\n            }\n        }\n    }\n\n    if (diff < 86400) {\n        const hours = Math.floor(diff / 3600);\n        return {\n            key: \"date_hours\",\n            count: hours,\n            replaces: {\n                count: hours.toString()\n            }\n        }\n    }\n\n    let date = new Date(timestamp*1000).toLocaleDateString(selectLanguageCode(store.getState()), {year: \"numeric\", month: \"long\", day: \"2-digit\"});\n    return {\n        key: \"date_date\",\n        replaces: {\n            date: date\n        }\n    }\n\n}\n","import classNames from \"classnames\";\nimport { FC } from \"react\";\nimport { deleteOwnPost, dislikePost, likePost } from \"../../slices/postsSlice\";\nimport { selectAccount } from \"../../slices/profileSlice\";\nimport { IPost } from \"../../types\";\nimport { getRelativeDateKey } from \"../../util/date\";\nimport { useAppDispatch, useAppSelector, useLocalization } from \"../../util/hooks\";\nimport { Avatar } from \"../basic/Avatar\";\nimport styles from \"./FeedPost.module.scss\";\n\ntype PostProps = {\n    post: IPost\n}\n\nexport const FeedPost: FC<PostProps> = ({post}) => {\n    const lp = useLocalization();\n    const dispatch = useAppDispatch();\n    const account = useAppSelector(selectAccount);\n\n    return (\n        <div className={styles.post}>\n            <div className={styles.header}>\n                <Avatar url={post.author.profile_photo_url} size={\"2.5em\"}/>\n                <div className={styles.info}>\n                    <div className={styles.name}>\n                        { `${post.author.first_name} ${post.author.last_name}`}\n                    </div>\n                    <div className={styles.time}>\n                        {lp(getRelativeDateKey(post.created_at, Date.now()))}\n                    </div>\n                </div>\n                <div className={styles.more}  onClick={() => {\n                    if(account?.username === post.author.username) {\n                        dispatch(deleteOwnPost(post.id));\n                    }\n                }}>\n                    <i className=\"icon icon-more\"/>\n                </div>\n            </div>\n            <div className={styles.content}>\n                {!!post.photos.length && <div className={styles.square}>\n                    <img src={post.photos[0].url} className={styles.image} alt=\"Post content\"/>\n                </div>}\n                {post.description && <div className={styles.description}>{post.description}</div>}\n            </div>\n            <div className={styles.footer}>\n                <IconText icon=\"like\" text={post.likes_count.toString()} liked={post.is_liked} onClick={() => dispatch(post.is_liked ? dislikePost(post.id) : likePost(post.id))}/>\n                <IconText icon=\"comments\" text=\"0\"/>\n                <div className={styles.separator}/>\n                <div className={styles.share}>{lp(\"post_share\")} <i className=\"icon icon-arrow\"/></div>\n            </div>\n        </div>\n    )\n}\n\ntype IconTextParameters = {\n    icon: string\n    text: string\n    liked?: boolean\n    onClick?: React.MouseEventHandler<HTMLSpanElement>\n}\n\nconst IconText: FC<IconTextParameters> = ({icon, text, liked = false, onClick}) => {\n    return (\n        <span className={styles.iconText} onClick={onClick}>\n            <i className={classNames({\n                \"icon\": true,\n                [`icon-${icon}`]: true,\n                [styles.liked]: liked\n            })\n            }/>\n            <span className={styles.text}>{text}</span>\n        </span>\n    )\n}","import { FC, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { fetchAllPosts, selectLoadedPosts } from \"../../slices/postsSlice\";\nimport { useAppDispatch } from \"../../util/hooks\";\nimport { FeedPost } from \"./FeedPost\";\nimport styles from \"./PostsFeed.module.scss\";\n\ntype PostsFeedParameters = {\n    username?: string\n}\n\nexport const PostsFeed: FC<PostsFeedParameters> = ({username}) => {\n    const dispatch = useAppDispatch();\n\n    useEffect(() => {\n        dispatch(fetchAllPosts(username));\n    }, [username, dispatch]);\n\n    const posts = useSelector(selectLoadedPosts);\n\n    return (\n        <div className={styles.feed}>\n            <div className={styles.postList}>\n                {posts.map(post => <FeedPost key={post.id} post={post}/>)}\n            </div>\n        </div>\n    )\n}","import classNames from \"classnames\";\nimport { FC } from \"react\";\nimport ReactModal from \"react-modal\";\nimport styles from \"./Modal.module.scss\";\n\ntype ModalParameters = {\n    isOpen: boolean\n    className?: string\n    onRequestClose?(event: React.MouseEvent<Element, MouseEvent> | React.KeyboardEvent<Element>): void\n}\n\nexport const Modal: FC<ModalParameters> = ({isOpen, onRequestClose, className, children}) => {\n    return (\n        <ReactModal className={classNames(styles.modal, className)} overlayClassName={styles.overlay} isOpen={isOpen} onRequestClose={onRequestClose}>\n            {children}\n        </ReactModal>\n    )\n}","import classNames from \"classnames\";\nimport { FC } from \"react\";\nimport styles from \"./TextArea.module.scss\";\n\ninterface TextAreaParameters extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n    label?: string\n    placeholder?: string\n    rows?: number\n    className?: string\n    [key: string]: any\n}\n\nexport const TextArea: FC<TextAreaParameters> = ({label, placeholder, className, ...otherParams}) => {\n    return (\n        <label className={classNames({\n            [styles.textArea]: true\n            }, className)}>\n            {label}\n            <textarea placeholder={placeholder} {...otherParams}/>\n        </label>\n    )\n}","import AwsS3 from '@uppy/aws-s3';\nimport Uppy from '@uppy/core';\nimport { DragDrop } from '@uppy/react';\nimport { FC, useEffect, useState } from \"react\";\nimport { createOwnPost } from '../../slices/postsSlice';\nimport { API_BASE, IPostCreationParameters } from '../../util/api';\nimport { useAppDispatch, useLocalization } from \"../../util/hooks\";\nimport { Button } from \"../basic/Button\";\nimport { Modal } from '../basic/Modal';\nimport { TextArea } from \"../basic/TextArea\";\nimport styles from \"./NewPost.module.scss\";\n\ntype NewPostParameters = {\n    opened?: boolean\n    onRequestClose?(event: React.MouseEvent<Element, MouseEvent> | React.KeyboardEvent<Element>): void\n}\n\nconst uppy = Uppy({\n    restrictions: {\n        maxNumberOfFiles: 1,\n        allowedFileTypes: [\"image/*\"]\n    },\n})\n\nuppy.use(AwsS3, {\n    companionUrl: API_BASE,\n})\n\nexport const NewPost: FC<NewPostParameters> = ({ opened = false, onRequestClose }) => {\n    const lp = useLocalization();\n    const dispatch = useAppDispatch();\n\n    const [description, setDescription] = useState(\"\");\n\n    useEffect(() => {\n        if (!opened) {\n            // reset on close\n            setDescription(\"\");\n        }\n    }, [opened])\n\n    return (\n        <Modal className={styles.newPost} isOpen={opened} onRequestClose={onRequestClose}>\n            <DragDrop\n                uppy={uppy}\n                locale={{ strings: { dropHereOr: lp(\"post_new_file\") } }}\n            />\n            <TextArea\n                className={styles.description}\n                rows={5}\n                placeholder={lp(\"post_new_description_placeholder\")}\n                label={lp(\"post_new_description\")}\n                onChange={ev => setDescription(ev.currentTarget.value)}\n                value={description}\n            />\n            <div className={styles.buttons}>\n                <Button lightBorder onClick={onRequestClose}>{lp(\"general_cancel\")}</Button>\n                <Button color=\"blue\" onClick={async ev => {\n                    // TODO separate logic into util, preview image\n                    const result = await uppy.upload()\n                    console.log(result);\n                    if (result.successful.length) {\n                        // how am I supposed to get id and storage, except parsing string!?\n                        const data = result.successful[0].data;\n                        const meta = result.successful[0].meta;\n                        const key: string = (meta as any).key;\n                        const storage = key.split(\"/\")[0];\n                        const id = key.split(\"/\")[1];\n                        const params: IPostCreationParameters = {\n                            description,\n                            photos_attributes: [\n                                {\n                                    image: {\n                                        id: id,\n                                        storage: storage,\n                                        metadata: {\n                                            filename: meta.name,\n                                            size: data.size,\n                                            mime_type: data.type\n                                        }\n                                    }\n                                }\n                            ]\n                        }\n\n                        dispatch(createOwnPost(params));\n                        onRequestClose?.(ev);\n                    } else if (result.successful.length === 0 && result.failed.length === 0) {\n                        if (description) {\n                            dispatch(createOwnPost({\n                                description,\n                                photos_attributes: []\n                            }))\n                            onRequestClose?.(ev);\n                        }\n                    }\n\n                }}>{lp(\"post_new_post\")}</Button>\n            </div>\n        </Modal>\n    )\n}","import classNames from \"classnames\";\nimport { FC } from \"react\";\nimport styles from \"./Input.module.scss\";\n\ninterface InputParameters extends React.InputHTMLAttributes<HTMLInputElement> {\n    label?: string\n    placeholder?: string\n    icon?: string\n    iconColor?: string\n    className?: string\n    [key: string]: any\n}\n\nexport const Input: FC<InputParameters> = ({label, placeholder, icon, iconColor, className, ...otherParams}) => {\n    return (\n        <label className={classNames({\n            [styles.input]: true\n            }, className)}>\n            {label}\n            <input placeholder={placeholder} {...otherParams}/>\n        </label>\n    )\n}","import classNames from \"classnames\";\nimport { FC, useState } from \"react\";\nimport { logout, selectAccount, updateAccount } from \"../../slices/profileSlice\";\nimport { IProfileUpdateParameters } from \"../../util/api\";\nimport { useAppDispatch, useAppSelector, useLocalization } from \"../../util/hooks\";\nimport { Avatar } from \"../basic/Avatar\";\nimport { Button } from \"../basic/Button\";\nimport { Input } from \"../basic/Input\";\nimport { Modal } from \"../basic/Modal\";\nimport styles from \"./ProfileEdit.module.scss\";\n\ntype ProfileEditParameters = {\n    opened?: boolean\n    onRequestClose?(event: React.MouseEvent<Element, MouseEvent> | React.KeyboardEvent<Element>): void\n}\n\nexport const ProfileEdit: FC<ProfileEditParameters> = ({ opened = false, onRequestClose }) => {\n    const lp = useLocalization();\n    const dispatch = useAppDispatch();\n\n    const account = useAppSelector(selectAccount);\n\n    const [firstName, setFirstName] = useState(account?.first_name);\n    const [secondName, setSecondName] = useState(account?.last_name);\n    const [jobTitle, setJobTitle] = useState(account?.job_title);\n    const [description, setDescription] = useState(account?.description);\n\n    if (!account) {\n        return (\n            <Modal className={styles.profileEdit} isOpen={opened} onRequestClose={onRequestClose}>\n                NO ACCOUNT!!!\n            </Modal>\n        )\n    }\n\n    return (\n        <Modal className={styles.profileEdit} isOpen={opened} onRequestClose={onRequestClose}>\n            <div className={styles.header}>\n                <div className={styles.title}>\n                    {lp(\"profile_edit_title\")}\n                </div>\n                <div className={styles.logout} onClick={ev => {\n                    dispatch(logout());\n                    onRequestClose?.(ev);\n                }}>\n                    {lp(\"general_logout\")}\n                </div>\n            </div>\n            <div className={styles.topBlock}>\n                <Avatar url={account.profile_photo_url} size=\"9rem\" />\n                <div className={styles.name}>\n                    <Input\n                        className={styles.input}\n                        label={lp(\"profile_edit_first_name\")}\n                        placeholder={lp(\"profile_edit_first_name_placeholder\")}\n                        value={firstName}\n                        onChange={ev => setFirstName(ev.currentTarget.value)}\n                    />\n                    <Input\n                        className={styles.input}\n                        label={lp(\"profile_edit_second_name\")}\n                        placeholder={lp(\"profile_edit_second_name_placeholder\")}\n                        value={secondName}\n                        onChange={ev => setSecondName(ev.currentTarget.value)}\n                    />\n                </div>\n            </div>\n            <Input\n                className={styles.input}\n                label={lp(\"profile_edit_job_title\")}\n                placeholder={lp(\"profile_edit_job_title_placeholder\")}\n                value={jobTitle}\n                onChange={ev => setJobTitle(ev.currentTarget.value)}\n            />\n            <Input\n                className={classNames(styles.input, styles.description)}\n                label={lp(\"profile_edit_description\")}\n                placeholder={lp(\"profile_edit_description_placeholder\")}\n                value={description}\n                onChange={ev => setDescription(ev.currentTarget.value)}\n            />\n\n            <div className={styles.buttons}>\n                <Button lightBorder onClick={onRequestClose}>{lp(\"general_cancel\")}</Button>\n                <Button color=\"blue\" onClick={ev => {\n                    const params: IProfileUpdateParameters = {...account};\n                    params.first_name = firstName;\n                    params.last_name = secondName;\n                    params.job_title = jobTitle;\n                    params.description = description;\n                    // TODO image\n                    dispatch(updateAccount(params));\n                    onRequestClose?.(ev);\n                }}>{lp(\"general_save\")}</Button>\n            </div>\n        </Modal>\n    )\n}","import { FC, useState } from \"react\";\nimport { IProfile } from \"../../types\";\nimport { useLocalization } from \"../../util/hooks\";\nimport { Avatar } from \"../basic/Avatar\";\nimport { Button } from \"../basic/Button\";\nimport { NewPost } from \"../post/NewPost\";\nimport { ProfileEdit } from \"./ProfileEdit\";\nimport styles from \"./ProfileInfo.module.scss\";\n\nexport const ProfileInfo: FC<{profile: IProfile, own?: boolean}> = ({profile, own = false}) => {\n    const lp = useLocalization();\n    const [isNewPostOpened, setNewPostOpened] = useState(false);\n    const [isProfileEditOpened, setProfileEditOpened] = useState(false);\n\n    return (\n        <div className={styles.profileInfo}>\n            <div className={styles.top}>\n                <div className={styles.followers}>\n                    <div className={styles.number}>{profile.followers}</div>\n                    <div className={styles.smallText}>{lp(\"profile_followers\", {}, profile.followers)}</div>\n                </div>\n                <Avatar url={profile.profile_photo_url} border size=\"5em\"/>\n                <div className={styles.following}>\n                    <div className={styles.number}>{profile.following}</div>\n                    <div className={styles.smallText}>{lp(\"profile_following\")}</div>\n                </div>\n            </div>\n            <div className={styles.bottom}>\n                <div className={styles.info}>\n                    {`${profile.first_name} ${profile.last_name} - ${profile.job_title}`}\n                </div>\n                <div className={styles.description}>\n                    {profile.description}\n                </div>\n                {own && <div className={styles.actionButtons}>\n                    <Button smallPadding onClick={() => setProfileEditOpened(true)}>{lp(\"profile_edit\")}</Button>\n                    <Button smallPadding color=\"blue\" onClick={() => setNewPostOpened(true)}>{lp(\"post_new\")}</Button>\n                </div>}\n            </div>\n            <NewPost opened={isNewPostOpened} onRequestClose={() => setNewPostOpened(false)}/>\n            <ProfileEdit opened={isProfileEditOpened} onRequestClose={() => setProfileEditOpened(false)} />\n        </div>\n    )\n}","import { FC, useEffect } from \"react\";\nimport { fetchAllProfiles, selectProfiles } from \"../slices/profileSlice\";\nimport { useAppDispatch, useAppSelector } from \"../util/hooks\";\nimport { Avatar } from \"./basic/Avatar\";\nimport styles from \"./StoriesSlider.module.scss\";\n\nexport const StoriesSlider: FC = () => {\n\n    const dispatch = useAppDispatch();\n\n    useEffect(() => {\n        dispatch(fetchAllProfiles());\n    }, [dispatch]);\n\n    const profiles = useAppSelector(selectProfiles);\n\n    return (\n        <div className={styles.slider}>\n            {profiles/*.filter(profile => profile.profile_photo_url)*/.map(profile => <Avatar key={profile.username} url={profile.profile_photo_url} size={\"4em\"} border/>)}\n        </div>\n    )\n} ","import { FC } from \"react\";\nimport { Button } from \"../components/basic/Button\";\nimport { Footer } from \"../components/Footer\";\nimport { Header } from \"../components/Header\";\nimport { PostsFeed } from \"../components/post/PostsFeed\";\nimport { ProfileInfo } from \"../components/profile/ProfileInfo\";\nimport { StoriesSlider } from \"../components/StoriesSlider\";\nimport { selectAccount, selectIsLoggedIn } from \"../slices/profileSlice\";\nimport { IProfile } from \"../types\";\nimport { useAppSelector } from \"../util/hooks\";\nimport styles from \"./Home.module.scss\";\n\nconst Home: FC = () => {\n    const isLoggedIn = useAppSelector(selectIsLoggedIn);\n    const account = useAppSelector(selectAccount) as IProfile;\n    return (\n        <div className={styles.home}>\n            <Header home profile/>\n            <div className={styles.content}>\n                <div className={styles.left}>\n                    <StoriesSlider/>\n                    <PostsFeed/>\n                </div>\n                <div className={styles.right}>\n                    <div className={styles.sticky}>\n                        { isLoggedIn ? <ProfileInfo profile={account} own/> :<Button color=\"black\" to=\"/login\">Login</Button>}\n                        <Footer/>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Home;","import { FC, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button } from \"../components/basic/Button\";\nimport { Input } from \"../components/basic/Input\";\nimport { Header } from \"../components/Header\";\nimport { fetchCurrentAccount, selectAccount } from \"../slices/profileSlice\";\nimport { createAccount, login } from \"../util/api\";\nimport { useAppDispatch, useAppSelector, useLocalization } from \"../util/hooks\";\nimport styles from \"./Login.module.scss\";\n\nconst Login: FC = () => {\n    const lp = useLocalization();\n    const history = useHistory();\n    const dispatch = useAppDispatch();\n\n    const account = useAppSelector(selectAccount);\n\n    useEffect(() => {\n        if(account) history.replace(\"/\");\n    }, [account, history]);\n\n    const [signUp, setSignUp] = useState(false); \n\n    const [email, setEmail] = useState(\"\");\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    return (\n        <div className={styles.login}>\n            <Header/>\n            <div className={styles.content}>\n                <div className={styles.presentation}>\n                    Photos go wroom\n                </div>\n                <div className={styles.authPane}>\n                    <div className={styles.title}>{lp(signUp ? \"login_sign_up\" : \"login_login\")}</div>\n\n                    <Input \n                        label={lp(\"login_field_email_label\")} \n                        placeholder={lp(\"login_field_email_placeholder\")}\n                        type=\"email\"\n                        className={styles.input}\n                        onChange={ev => setEmail(ev.currentTarget.value)}\n                        value={email}\n                    />\n                    {signUp && <Input \n                        label={lp(\"login_field_username_label\")} \n                        placeholder={lp(\"login_field_username_placeholder\")}\n                        className={styles.input}\n                        onChange={ev => setUsername(ev.currentTarget.value)}\n                        value={username}\n                    />}\n                    <Input \n                        label={lp(\"login_field_password_label\")} \n                        placeholder={lp(\"login_field_password_placeholder\")}\n                        type=\"password\"\n                        className={styles.input}\n                        onChange={ev => setPassword(ev.currentTarget.value)}\n                        value={password}\n                    />\n\n                    <Button color=\"blue\" onClick={() => {\n                        // TODO validate fields\n                        if(signUp) {\n                            createAccount({login: email, password, username})\n                                .then(() => dispatch(fetchCurrentAccount()))\n                                .then(() => history.push(\"/\"));\n                        } else {\n                            login({login: email, password})\n                                .then(() => dispatch(fetchCurrentAccount()))\n                                .then(() => history.push(\"/\"));\n                        }\n                    }}>\n                        {lp(signUp ? \"login_sign_up_button\" : \"login_login_button\")}\n                    </Button>\n                    <div className={styles.switch}>\n                        {lp(signUp ? \"login_have_account\" : \"login_no_account\")}\n                        <span className={styles.inlineSwitch} onClick={() => setSignUp(!signUp)}>\n                            {lp(signUp? \"login_login\" : \"login_sign_up\")}\n                        </span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Login;","import { FC } from \"react\";\n\nconst OwnProfile: FC = () => {\n    return (\n        <div>\n            Your profile\n        </div>\n    )\n}\n\nexport default OwnProfile;","import { FC } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { PostsFeed } from \"../components/post/PostsFeed\";\nimport { selectPostsStatus } from \"../slices/postsSlice\";\nimport { useAppSelector } from \"../util/hooks\";\n\ninterface ProfileParams {\n    username: string\n}\n\nconst Profile: FC = () => {\n    const {username}: ProfileParams = useParams();\n    const status = useAppSelector(selectPostsStatus);\n\n    return (\n        <>\n        Status: {status}\n        <PostsFeed username={username}/>\n        </>\n    )\n}\n\nexport default Profile;","import {\n    HashRouter, Redirect, Route, Switch\n} from \"react-router-dom\";\nimport Home from \"./routes/Home\";\nimport Login from \"./routes/Login\";\nimport OwnProfile from \"./routes/OwnProfile\";\nimport Profile from \"./routes/Profile\";\nimport { selectLanguageCode, setLanguage } from \"./slices/localizationSlice\";\nimport { fetchCurrentAccount } from \"./slices/profileSlice\";\nimport { useAppDispatch, useAppSelector, useMountEffect } from \"./util/hooks\";\n\n\nfunction App() {\n    const dispatch = useAppDispatch();\n    const code = useAppSelector(selectLanguageCode);\n\n    // on first render\n    useMountEffect(() => {\n        dispatch(setLanguage(code));\n\n        if(localStorage.getItem(\"auth\")) dispatch(fetchCurrentAccount());\n    });\n\n    return (\n        <HashRouter>\n            <Switch>\n                <Route path=\"/login\">\n                    <Login />\n                </Route>\n                <Route path=\"/profile/:username\">\n                    <Profile />\n                </Route>\n                <Route exact path=\"/profile\">\n                    <OwnProfile />\n                </Route>\n                <Route exact path=\"/\">\n                    <Home />\n                </Route>\n                <Route>\n                    <Redirect to=\"/\" />\n                </Route>\n            </Switch>\n        </HashRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Modal from 'react-modal';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport \"./css/global.scss\";\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('app')\n);\n\nModal.setAppElement('#app');\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__Su-pD\",\"content\":\"Login_content__1n307\",\"presentation\":\"Login_presentation__1xukJ\",\"authPane\":\"Login_authPane__Gti9L\",\"title\":\"Login_title__1CcnA\",\"input\":\"Login_input__3qya9\",\"switch\":\"Login_switch__19x0Z\",\"inlineSwitch\":\"Login_inlineSwitch__VkzuR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2XAj3\",\"logo\":\"Header_logo__2XG30\",\"separator\":\"Header_separator__1wAjB\",\"button\":\"Header_button__1nZ-l\",\"dropdown\":\"Header_dropdown__2aPVx\",\"hidden\":\"Header_hidden__3njkq\",\"dropdownItem\":\"Header_dropdownItem__3ivfE\",\"reserver\":\"Header_reserver__1tudu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1ymYf\",\"square\":\"Button_square__3gOMh\",\"smallPadding\":\"Button_smallPadding__cHP4h\",\"white\":\"Button_white__3MqI4\",\"blue\":\"Button_blue__2cyym\",\"black\":\"Button_black__iOpLV\",\"lightBorder\":\"Button_lightBorder__A37mZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"Home_home__1gYZR\",\"content\":\"Home_content__2tDQD\",\"left\":\"Home_left__1N5fx\",\"right\":\"Home_right__wSsfc\",\"sticky\":\"Home_sticky__2ejHi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__1G6Wy\",\"buttonRow\":\"Footer_buttonRow__2M2B4\",\"greyButton\":\"Footer_greyButton__2KO1G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"square\":\"Avatar_square__25UWu\",\"border\":\"Avatar_border__BfyfQ\",\"visible\":\"Avatar_visible__EWr5c\",\"avatar\":\"Avatar_avatar__231VH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPost\":\"NewPost_newPost__3J1LJ\",\"description\":\"NewPost_description__1Jvbd\",\"buttons\":\"NewPost_buttons__3AJ-S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"feed\":\"PostsFeed_feed__1dkaT\",\"postList\":\"PostsFeed_postList__2LTO-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"overlay\":\"Modal_overlay__1ltBW\",\"modal\":\"Modal_modal__3GzDe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textArea\":\"TextArea_textArea__3e8AL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__3Jlvs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slider\":\"StoriesSlider_slider__akI6v\"};"],"sourceRoot":""}