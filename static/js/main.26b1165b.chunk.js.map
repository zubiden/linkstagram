{"version":3,"sources":["routes/Login.module.scss","components/Header.module.scss","components/basic/Button.module.scss","routes/Home.module.scss","components/Footer.module.scss","components/basic/Avatar.module.scss","components/post/PostsFeed.module.scss","components/StoriesSlider.module.scss","components/basic/Input.module.scss","components/post/FeedPost.module.scss","components/basic/Button.tsx","slices/localizationSlice.ts","util/api.ts","slices/profileSlice.ts","util/hooks.ts","components/Footer.tsx","components/basic/Avatar.tsx","components/Header.tsx","slices/postsSlice.ts","store.ts","util/date.ts","components/post/FeedPost.tsx","components/post/PostsFeed.tsx","components/ProfileInfo.tsx","components/StoriesSlider.tsx","routes/Home.tsx","components/basic/Input.tsx","routes/Login.tsx","routes/OwnProfile.tsx","routes/Profile.tsx","App.tsx","serviceWorker.ts","index.tsx","components/ProfileInfo.module.scss"],"names":["module","exports","Button","color","lightBorder","square","to","onClick","className","children","smallPadding","otherArgs","history","useHistory","classNames","styles","button","ev","push","VALID_LANGUAGES","initialState","strings","code","localStorage","getItem","status","setLanguage","createAsyncThunk","thunkAPI","a","state","getState","selectTranslationStrings","Object","keys","length","selectLanguageCode","fetch","then","res","json","key","setItem","dispatch","setLanguageCode","Error","localizationSlice","createSlice","name","reducers","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","localization","API_BASE","fetchUserPosts","username","request","url","method","data","options","headers","Headers","body","JSON","stringify","auth","set","fetchAllProfiles","fetchCurrentAccount","account","error","profileSlice","allProfiles","profilesFetchStatus","accountFetchStatus","logout","removeItem","resetAccountFetchStatus","rejected","selectProfiles","profile","selectAccount","selectIsLoggedIn","useAppDispatch","useDispatch","useAppSelector","useSelector","useLocalization","lp","replaces","count","defaultValue","undefined","isLocalizationParameters","value","found","replace","isLanguageValue","countToPluralCode","other","replacement","replaceAll","uk","en","Footer","footer","buttonRow","text","year","toString","GreyButton","greyButton","Avatar","size","border","style","width","visible","src","avatar","alt","Header","home","isLoggedIn","langCode","useState","dropdown","setDropdown","header","logo","separator","hidden","entries","map","dropdownItem","profile_photo_url","reserver","fetchAllPosts","selectCurrentPostsUsername","selectLoadedPosts","setCurrentPostsUsername","postsSlice","loadedPosts","currentPostsUsername","posts","selectPostsStatus","store","configureStore","reducer","postsReducer","profileReducer","localizationReducer","getRelativeDateKey","timestamp","now","Date","getTime","diff","Math","abs","minutes","floor","hours","date","toLocaleDateString","month","day","FeedPost","post","author","info","first_name","last_name","time","created_at","more","content","photos","image","description","icon","likes_count","liked","is_liked","share","IconText","iconText","PostsFeed","useEffect","feed","postList","id","ProfileInfo","own","profileInfo","top","followers","number","smallText","following","bottom","job_title","actionButtons","StoriesSlider","profiles","slider","Home","left","right","sticky","Input","label","placeholder","iconColor","onChange","otherParams","input","Login","signUp","setSignUp","email","setEmail","setUsername","password","setPassword","login","presentation","authPane","title","type","currentTarget","get","switch","inlineSwitch","OwnProfile","Profile","useParams","App","fun","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.26b1165b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__Su-pD\",\"content\":\"Login_content__1n307\",\"presentation\":\"Login_presentation__1xukJ\",\"authPane\":\"Login_authPane__Gti9L\",\"title\":\"Login_title__1CcnA\",\"input\":\"Login_input__3qya9\",\"switch\":\"Login_switch__19x0Z\",\"inlineSwitch\":\"Login_inlineSwitch__VkzuR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2XAj3\",\"logo\":\"Header_logo__2XG30\",\"separator\":\"Header_separator__1wAjB\",\"button\":\"Header_button__1nZ-l\",\"dropdown\":\"Header_dropdown__2aPVx\",\"hidden\":\"Header_hidden__3njkq\",\"dropdownItem\":\"Header_dropdownItem__3ivfE\",\"reserver\":\"Header_reserver__1tudu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1ymYf\",\"square\":\"Button_square__3gOMh\",\"smallPadding\":\"Button_smallPadding__cHP4h\",\"white\":\"Button_white__3MqI4\",\"blue\":\"Button_blue__2cyym\",\"black\":\"Button_black__iOpLV\",\"lightBorder\":\"Button_lightBorder__A37mZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"Home_home__1gYZR\",\"content\":\"Home_content__2tDQD\",\"left\":\"Home_left__1N5fx\",\"right\":\"Home_right__wSsfc\",\"sticky\":\"Home_sticky__2ejHi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__1G6Wy\",\"buttonRow\":\"Footer_buttonRow__2M2B4\",\"greyButton\":\"Footer_greyButton__2KO1G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"square\":\"Avatar_square__25UWu\",\"border\":\"Avatar_border__BfyfQ\",\"visible\":\"Avatar_visible__EWr5c\",\"avatar\":\"Avatar_avatar__231VH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"feed\":\"PostsFeed_feed__1dkaT\",\"postList\":\"PostsFeed_postList__2LTO-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slider\":\"StoriesSlider_slider__akI6v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__3Jlvs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"FeedPost_post__38L69\",\"header\":\"FeedPost_header__xfS1t\",\"info\":\"FeedPost_info__2jKSq\",\"name\":\"FeedPost_name__s5-LB\",\"time\":\"FeedPost_time__wHx6V\",\"more\":\"FeedPost_more__1F8dQ\",\"content\":\"FeedPost_content__bqJzD\",\"square\":\"FeedPost_square__2oSJq\",\"image\":\"FeedPost_image__3GYFu\",\"description\":\"FeedPost_description__dY6jO\",\"footer\":\"FeedPost_footer__3nUDA\",\"iconText\":\"FeedPost_iconText__3DHXK\",\"liked\":\"FeedPost_liked__1hrUk\",\"text\":\"FeedPost_text__390dQ\",\"separator\":\"FeedPost_separator__2L6kG\",\"share\":\"FeedPost_share__EP4GG\"};","import classNames from \"classnames\";\nimport { FC } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport styles from \"./Button.module.scss\";\n\ntype ButtonParameters = {\n    color?: \"blue\" | \"black\" | \"white\"\n    lightBorder?: boolean\n    square?: boolean\n    smallPadding?: boolean\n    className?: string\n    to?: string\n    onClick?: Function\n    [key: string]: any\n}\n\nexport const Button: FC<ButtonParameters> = (\n    {\n        color = \"white\",\n        lightBorder = false,\n        square = false, to,\n        onClick, className,\n        children,\n        smallPadding = false,\n        ...otherArgs\n    }) => {\n    const history = useHistory();\n\n    return (\n        <button className={classNames({\n            [styles.button]: true,\n            [styles[color]]: true,\n            [styles.square]: square,\n            [styles.lightBorder]: lightBorder,\n            [styles.smallPadding]: smallPadding\n        }, className)}\n            onClick={ev => {\n                onClick?.(ev);\n                if (to) history.push(to);\n            }}\n            {...otherArgs}>\n            {children}\n        </button>\n    )\n}","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store\";\nimport { LanguageValue } from \"../types\";\n\nexport const LANGUAGE_FOLDER = \"language\";\n\nexport const VALID_LANGUAGES: { [key: string]: string } = {\n    \"uk\": \"UA\",\n    \"en\": \"EN\"\n}\n\nexport interface StringsMap {\n    [key: string]: string | LanguageValue\n}\n\nexport interface LocalizationState {\n    strings: StringsMap\n    code: string\n    status: \"idle\" | \"loading\" | \"failed\";\n}\n\nconst initialState: LocalizationState = {\n    strings: {},\n    code: localStorage.getItem(\"langCode\") || \"en\",\n    status: \"idle\",\n}\n\nexport const setLanguage = createAsyncThunk(\n    \"localization/setLanguage\",\n    async (code: string, thunkAPI) => {\n        if (code in VALID_LANGUAGES) {\n            const state = thunkAPI.getState() as RootState;\n            const strings = selectTranslationStrings(state);\n            if(Object.keys(strings).length && code === selectLanguageCode(state)) {\n                return strings; // don't make request to fetch active language\n            }\n            \n            return fetch(`${LANGUAGE_FOLDER}/${code}.json`)\n                .then(res => res.json())\n                .then(json => {\n                    let strings: StringsMap = {};\n                    for (let key in json) {\n                        strings[key] = json[key];\n                    }\n\n                    localStorage.setItem(\"langCode\", code);\n                    thunkAPI.dispatch(setLanguageCode(code));\n\n                    return strings;\n                });\n        } else {\n            throw new Error(\"Not a valid language!\");\n        }\n    }\n);\n\nconst localizationSlice = createSlice({\n    name: \"localization\",\n    initialState,\n    reducers: {\n        setLanguageCode(state, action: PayloadAction<string>) {\n            state.code = action.payload\n        }\n    },\n    extraReducers: (builder) => {\n        builder.addCase(setLanguage.pending, (state) => {\n            state.status = \"loading\";\n        }).addCase(setLanguage.fulfilled, (state, action) => {\n            state.status = \"idle\";\n            state.strings = action.payload;\n        })\n    },\n})\n\n// Reducer\nexport default localizationSlice.reducer;\n\n// Actions\nconst { setLanguageCode } = localizationSlice.actions;\n\n//Selectors\n\nexport const selectLanguageCode = (state: RootState) => state.localization.code;\nexport const selectTranslationStrings = (state: RootState) => state.localization.strings;","import { IComment, IPhotosAttribute, IPost, IProfile } from \"../types\";\n\nexport const API_BASE = \"https://linkstagram-api.ga\";\n\n// API-SPECIFIC TYPES\n\nexport interface ILoginError {\n    \"field-error\": string[],\n    error: string\n}\n\nexport interface ISuccess {\n    success: string\n}\n\nexport interface IError {\n    error: string\n}\n\nexport interface IRegistrationParameters {\n    username: string;\n    login: string;\n    password: string;\n}\n\nexport interface ILoginParameters {\n    login: string;\n    password: string;\n}\n\nexport interface IPostCreationParameters {\n    description:       string;\n    photos_attributes: IPhotosAttribute[];\n}\n\n// AUTH\n\nexport function createAccount(data: IRegistrationParameters): Promise<ILoginError | ISuccess> {\n    return fetch(`${API_BASE}/create-account`, {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: new Headers({\n            \"Content-Type\": \"application/json\"\n        })\n    }).then(res => {\n        const headers = res.headers;\n        const auth = headers.get(\"authorization\");\n        if(auth) {\n            localStorage.setItem(\"auth\", auth);\n        } else {\n            localStorage.removeItem(\"auth\"); // login error, clear previous auth\n        }\n        return res.json();\n    });\n}\n\nexport function login(data: ILoginParameters): Promise<ILoginError | ISuccess> {\n    return fetch(`${API_BASE}/login`, {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: new Headers({\n            \"Content-Type\": \"application/json\"\n        })\n    }).then(res => {\n        const headers = res.headers;\n        const auth = headers.get(\"authorization\");\n        if(auth) {\n            localStorage.setItem(\"auth\", auth);\n        } else {\n            localStorage.removeItem(\"auth\"); // login error, clear previous auth\n        }\n        return res.json();\n    });\n}\n\n// COMMENTS\n\nexport function leaveComment(post_id: number, message: string): Promise<IComment> {\n    return request(`${API_BASE}/posts/${post_id}/comments`, \"POST\", {message});\n}\n\nexport function fetchComments(post_id: number): Promise<IComment[]> {\n    return request(`${API_BASE}/posts/${post_id}/comments`);\n}\n\n// ACCOUNT\n\nexport function fetchAccount(): Promise<IProfile | IError> {\n    return request(`${API_BASE}/account`);\n}\n\nexport function editAccount(account: IProfile): Promise<IProfile> {\n    return request(`${API_BASE}/account`, \"PATCH\", {account});\n}\n\n// LIKES\n\nexport function removeLike(post_id: number): Promise<{}> {\n    return request(`${API_BASE}/posts/${post_id}/like`, \"DELETE\");\n}\n\nexport function setLike(post_id: number): Promise<{}> {\n    return request(`${API_BASE}/posts/${post_id}/like`, \"POST\");\n}\n\n// POSTS\n\nexport function createPost(post: IPostCreationParameters): Promise<IPost> {\n    return request(`${API_BASE}/posts`, \"POST\", {post});\n}\n\nexport function deletePost(id: number): Promise<ISuccess | IError> {\n    return request(`${API_BASE}/posts/${id}`, \"DELETE\");\n}\n\nexport function fetchPost(id: number): Promise<IPost> {\n    return request(`${API_BASE}/posts/${id}`);\n}\n\nexport function fetchPosts(): Promise<IPost[]> {\n    return request(`${API_BASE}/posts`);\n}\n\nexport function fetchUserPosts(username: string): Promise<IPost[]> {\n    return request(`${API_BASE}/profiles/${username}/posts`);\n}\n\n// PROFILES\n\nexport function fetchProfiles(): Promise<IProfile[]> {\n    return request(`${API_BASE}/profiles`);\n}\n\nexport function fetchProfile(username: string): Promise<IProfile> {\n    return request(`${API_BASE}/profiles/${username}`);\n}\n\n// UTIL\n\nfunction request(url: string, method: \"GET\" | \"POST\" | \"PATCH\" | \"DELETE\" = \"GET\", data: any = null): Promise<any> {\n    let options: RequestInit = {\n        method\n    };\n\n    options.headers = new Headers({\n        \"Content-Type\": \"application/json\"\n    })\n    \n    if(data) {\n        options.body = JSON.stringify(data);\n    }\n\n    const auth = localStorage.getItem(\"auth\");\n    if(auth) {\n        options.headers.set(\"Authorization\", \"Bearer \"+ auth);\n    }\n    return fetch(url, options).then(res => res.json());\n}","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store\";\nimport { IProfile } from \"../types\";\nimport { fetchAccount, fetchProfiles, IError } from \"../util/api\";\n\nexport interface ProfileState {\n    account: IProfile | null;\n    allProfiles: IProfile[]\n    profilesFetchStatus: \"idle\" | \"loading\" | \"failed\";\n    accountFetchStatus: \"idle\" | \"loading\" | \"failed\";\n}\n\nconst initialState: ProfileState = {\n    account: null,\n    allProfiles: [],\n    profilesFetchStatus: \"idle\",\n    accountFetchStatus: \"idle\"\n}\n\nexport const fetchAllProfiles = createAsyncThunk(\n    \"profile/fetchAllProfiles\",\n    async () => {\n        return fetchProfiles();\n    }\n);\n\nexport const fetchCurrentAccount = createAsyncThunk(\n    \"profile/fetchAccount\",\n    async () => {\n        const account = await fetchAccount();\n        if(isError(account)) {\n            return null;\n        } else {\n            return account;\n        }\n    }\n);\n\nfunction isError(pet: IError | any): pet is IError {\n    return !!(pet as IError).error;\n}\n\nconst profileSlice = createSlice({\n    name: \"profile\",\n    initialState,\n    reducers: {\n        logout(state) {\n            state.account = null;\n            localStorage.removeItem(\"auth\");\n        },\n\n        resetAccountFetchStatus(state) {\n            state.accountFetchStatus = \"idle\";\n        }\n    },\n    extraReducers: (builder) => {\n        builder\n        // profiles\n        .addCase(fetchAllProfiles.pending, (state) => {\n            state.profilesFetchStatus = \"loading\";\n        }).addCase(fetchAllProfiles.fulfilled, (state, action) => {\n            state.profilesFetchStatus = \"idle\";\n            state.allProfiles = action.payload;\n        }).addCase(fetchAllProfiles.rejected, (state) => {\n            state.profilesFetchStatus = \"failed\";\n            state.allProfiles = [];\n        })\n        // account\n        .addCase(fetchCurrentAccount.pending, (state) => {\n            state.accountFetchStatus = \"loading\";\n        }).addCase(fetchCurrentAccount.fulfilled, (state, action) => {\n            state.accountFetchStatus = \"idle\";\n            state.account = action.payload;\n        }).addCase(fetchCurrentAccount.rejected, (state) => {\n            state.accountFetchStatus = \"failed\";\n            state.account = null;\n        })\n    },\n})\n\n// Reducer\nexport default profileSlice.reducer;\n\n// Actions\nexport const { logout, resetAccountFetchStatus } = profileSlice.actions;\n\n// Selectors\nexport const selectProfiles = (state: RootState) => state.profile.allProfiles;\nexport const selectProfilesFetchStatus = (state: RootState) => state.profile.profilesFetchStatus;\nexport const selectAccount = (state: RootState) => state.profile.account;\nexport const selectAccountFetchStatus = (state: RootState) => state.profile.accountFetchStatus;\nexport const selectIsLoggedIn = (state: RootState) => !!state.profile.account;","import { en, PluralCategory, uk } from \"make-plural\";\nimport { EffectCallback, useEffect } from \"react\";\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from \"react-router-dom\";\nimport { selectLanguageCode, selectTranslationStrings } from '../slices/localizationSlice';\nimport { selectIsLoggedIn } from \"../slices/profileSlice\";\nimport type { AppDispatch, RootState } from '../store';\nimport { LanguageValue, LocalizationParameters } from '../types';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\n// eslint-disable-next-line react-hooks/exhaustive-deps\nexport const useMountEffect = (fun: EffectCallback) => useEffect(fun, []);\n\nexport const useCheckLogin = () => {\n    const loggedIn = useAppSelector(selectIsLoggedIn);\n    const history = useHistory();\n\n    return (func?: Function) => {\n        if(loggedIn) {\n            func?.()\n        } else {\n            history.push(\"/login\");\n        }\n    }\n}\n\nexport const useLocalization = () => {\n    const strings = useAppSelector(selectTranslationStrings);\n    const code = useAppSelector(selectLanguageCode);\n\n    const lp = (key: LocalizationParameters | string = \"NO_TRANSLATION_KEY_PROVIDED\", replaces: {[key: string]: string} = {}, count: number = 1, defaultValue: string | undefined = undefined): string => {\n\t\tif(isLocalizationParameters(key)) return lp(key.key, key.replaces, key.count, key.defaultValue);\n        let value = strings[key];\n\t\tif(!value) {\n\t\t\treturn defaultValue || key;\n\t\t}\n\n\t\tlet found = key;\n\t\tif(isLanguageValue(value)) {\n            found = value[countToPluralCode(code, count)] || value.other; \n\t\t} else {\n\t\t\tfound = value;\n\t\t}\n\n\t\tfor(let replace in replaces) {\n\t\t\tlet replacement = replaces[replace];\n\t\t\tfound = found.replaceAll(`{${replace}}`, replacement);\n\t\t}\n        return found;\n\t}\n\n    return lp;\n}\n\nfunction countToPluralCode(code: string, count: number): PluralCategory {\n    const plurals: {[key: string]: (n: number | string, ord?: boolean) => PluralCategory} = {\n        \"uk\": uk,\n        \"en\": en\n    }\n    return plurals[code](count);\n}\n\nexport function isLocalizationParameters(key: LocalizationParameters | string): key is LocalizationParameters {\n    return (key as string).length === undefined;\n}\n\nexport function isLanguageValue(value: LanguageValue | string): value is LanguageValue {\n    return (value as string).length === undefined;\n}","import { FC } from \"react\";\nimport { useLocalization } from \"../util/hooks\";\nimport styles from \"./Footer.module.scss\";\n\nconst CURRENT_YEAR = 2021;\n\nexport const Footer: FC = () => {\n    const lp = useLocalization();\n\n    return (\n        <footer className={styles.footer}>\n            <div className={styles.buttonRow}>\n                <GreyButton text={lp(\"footer_about\")}/>\n                <GreyButton text={lp(\"footer_help\")}/>\n                <GreyButton text={lp(\"footer_privacy\")}/>\n                <GreyButton text={lp(\"footer_terms\")}/>\n                <GreyButton text={lp(\"footer_locations\")}/>\n                <GreyButton text={lp(\"footer_language\")}/>\n            </div>\n            <div className={styles.buttonRow}>\n                <GreyButton text={lp(\"footer_copyright\", {year: CURRENT_YEAR.toString()})}/>\n            </div>\n        </footer>\n    )\n}\n\nconst GreyButton: FC<{text: string}> = ({text}) => {\n    return <div className={styles.greyButton}>{text}</div>\n}","import classNames from \"classnames\";\nimport { FC } from \"react\";\nimport styles from \"./Avatar.module.scss\";\n\ntype AvatarProps = {\n    url: string,\n    size?: string,\n    border?: boolean\n}\n\nexport const Avatar: FC<AvatarProps> = ({url, size = \"4em\", border = false, ...otherArgs}) => {\n    return (\n        <div className={styles.square} {...otherArgs} style={{width: size}}>\n            <div className={classNames({\n                [styles.border]: true,\n                [styles.visible]: border\n            })}>\n                <img src={url} className={styles.avatar} alt=\"Avatar\"/>\n            </div>\n        </div>\n    )\n}","import classNames from \"classnames\";\nimport { FC, useState } from \"react\";\nimport { selectLanguageCode, setLanguage, VALID_LANGUAGES } from \"../slices/localizationSlice\";\nimport { selectAccount, selectIsLoggedIn } from \"../slices/profileSlice\";\nimport { useAppDispatch, useAppSelector, useLocalization } from \"../util/hooks\";\nimport { Avatar } from \"./basic/Avatar\";\nimport { Button } from \"./basic/Button\";\nimport styles from \"./Header.module.scss\";\n\ntype HeaderParameters = {\n    home?: boolean\n    profile?: boolean\n}\n\nexport const Header: FC<HeaderParameters> = ({home = false, profile = false}) => {\n    const dispatch = useAppDispatch();\n\n    const isLoggedIn = useAppSelector(selectIsLoggedIn);\n    const account = useAppSelector(selectAccount);\n\n    const lp = useLocalization();\n    const langCode = useAppSelector(selectLanguageCode);\n\n    const [dropdown, setDropdown] = useState(false);\n\n    return (\n        <>\n        <header className={styles.header}>\n            <div className={styles.logo}>Linkstagram</div>\n            <div className={styles.separator}/>\n            {home && <Button color=\"black\" className={styles.button} to=\"/\">{lp(\"header_home\")}</Button>}\n            <Button color=\"white\" className={styles.button} lightBorder square onClick={() => setDropdown(!dropdown)}>\n                {VALID_LANGUAGES[langCode]}\n                <div className={classNames({\n                    [styles.dropdown]: true,\n                    [styles.hidden]: !dropdown\n                    })} onClick={() => setDropdown(false)}>\n                    {Object.entries(VALID_LANGUAGES).map(([key, value]) => (\n                            <div className={styles.dropdownItem} key={key} onClick={() => dispatch(setLanguage(key))}>\n                                {value}\n                            </div>\n                        )\n                    )}\n                </div>\n            </Button>\n            {profile && isLoggedIn && account?.profile_photo_url && <Avatar url={account.profile_photo_url}/>}\n        </header>\n        <div className={styles.reserver}/>\n        </>\n    )\n}","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store\";\nimport { IPost } from \"../types\";\nimport { fetchPosts, fetchUserPosts } from \"../util/api\";\n\nexport interface PostsState {\n    loadedPosts: IPost[];\n    currentPostsUsername: string | null;\n    status: \"idle\" | \"loading\" | \"failed\";\n}\n\nconst initialState: PostsState = {\n    loadedPosts: [],\n    currentPostsUsername: null,\n    status: \"idle\",\n}\n\nexport const fetchAllPosts = createAsyncThunk(\n    \"posts/fetchAllPosts\",\n    async (username: string | undefined, thunkAPI) => {\n        if(selectCurrentPostsUsername(thunkAPI.getState() as RootState) === username) {\n            return selectLoadedPosts(thunkAPI.getState() as RootState);// don't fetch, if current user posts already loaded\n        } \n        \n        if(username) {\n            thunkAPI.dispatch(setCurrentPostsUsername(username));\n            return fetchUserPosts(username);\n        } else {\n            thunkAPI.dispatch(setCurrentPostsUsername(null));\n            return fetchPosts();\n        }\n    }\n  );\n\nconst postsSlice = createSlice({\n    name: \"posts\",\n    initialState,\n    reducers: {\n        setCurrentPostsUsername(state, action: PayloadAction<string | null>) {\n            state.currentPostsUsername = action.payload\n        }\n    },\n    extraReducers: (builder) => {\n        builder.addCase(fetchAllPosts.pending, (state) => {\n            state.status = \"loading\";\n            state.loadedPosts = [];\n        }).addCase(fetchAllPosts.fulfilled, (state, action) => {\n            state.status = \"idle\";\n            state.loadedPosts = action.payload;\n        }).addCase(fetchAllPosts.rejected, (state) => {\n            state.status = \"failed\";\n        });\n    },\n})\n\n// Reducer\nexport default postsSlice.reducer;\n\n// Actions\nconst { setCurrentPostsUsername } = postsSlice.actions;\n\n//Selectors\n\nexport const selectLoadedPosts = (state: RootState) => state.posts.loadedPosts;\nexport const selectPostsStatus = (state: RootState) => state.posts.status;\nexport const selectCurrentPostsUsername = (state: RootState) => state.posts.currentPostsUsername;","import { Action, configureStore, ThunkAction } from \"@reduxjs/toolkit\";\nimport localizationReducer from \"./slices/localizationSlice\";\nimport postsReducer from \"./slices/postsSlice\";\nimport profileReducer from \"./slices/profileSlice\";\n\nconst store = configureStore({\n    reducer: {\n        posts: postsReducer,\n        profile: profileReducer,\n        localization: localizationReducer\n    },\n})\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n\nexport default store;","import { selectLanguageCode } from \"../slices/localizationSlice\";\nimport store from \"../store\";\nimport { LocalizationParameters } from \"../types\";\n\nexport function getRelativeDateKey(timestamp: number | string, now: number): LocalizationParameters {\n    if(typeof timestamp === \"string\") timestamp = new Date(timestamp).getTime()/1000;\n    const diff = Math.abs(now - timestamp)\n\n    if (diff < 60) {\n        return {\n            key: \"date_now\"\n        }\n    }\n\n    if (diff < 3600) {\n        const minutes = Math.floor(diff / 60);\n\n        return {\n            key: \"date_minutes\",\n            count: minutes,\n            replaces: {\n                count: minutes.toString()\n            }\n        }\n    }\n\n    if (diff < 86400) {\n        const hours = Math.floor(diff / 3600);\n        return {\n            key: \"date_hours\",\n            count: hours,\n            replaces: {\n                count: hours.toString()\n            }\n        }\n    }\n\n    let date = new Date(timestamp*1000).toLocaleDateString(selectLanguageCode(store.getState()), {year: \"numeric\", month: \"long\", day: \"2-digit\"});\n    return {\n        key: \"date_date\",\n        replaces: {\n            date: date\n        }\n    }\n\n}\n","import classNames from \"classnames\";\nimport { FC } from \"react\";\nimport { IPost } from \"../../types\";\nimport { getRelativeDateKey } from \"../../util/date\";\nimport { useLocalization } from \"../../util/hooks\";\nimport { Avatar } from \"../basic/Avatar\";\nimport styles from \"./FeedPost.module.scss\";\n\ntype PostProps = {\n    post: IPost\n}\n\nexport const FeedPost: FC<PostProps> = ({post}) => {\n    const lp = useLocalization();\n\n    return (\n        <div className={styles.post}>\n            <div className={styles.header}>\n                <Avatar url={post.author.profile_photo_url} size={\"2.5em\"}/>\n                <div className={styles.info}>\n                    <div className={styles.name}>\n                        { `${post.author.first_name} ${post.author.last_name}`}\n                    </div>\n                    <div className={styles.time}>\n                        {lp(getRelativeDateKey(post.created_at, Date.now()))}\n                    </div>\n                </div>\n                <div className={styles.more}><i className=\"icon icon-more\"/></div>\n            </div>\n            <div className={styles.content}>\n                <div className={styles.square}>\n                    <img src={post.photos?.[0]?.url} className={styles.image} alt=\"Post content\"/>\n                </div>\n                {post.description && <div className={styles.description}>{post.description}</div>}\n            </div>\n            <div className={styles.footer}>\n                <IconText icon=\"like\" text={post.likes_count.toString()} liked={post.is_liked}/>\n                <IconText icon=\"comments\" text=\"А де їх брати?\"/>\n                <div className={styles.separator}/>\n                <div className={styles.share}>{lp(\"post_share\")} <i className=\"icon icon-arrow\"/></div>\n            </div>\n        </div>\n    )\n}\n\ntype IconTextParameters = {\n    icon: string\n    text: string\n    liked?: boolean\n}\n\nconst IconText: FC<IconTextParameters> = ({icon, text, liked = false}) => {\n    return (\n        <span className={styles.iconText}>\n            <i className={classNames({\n                \"icon\": true,\n                [`icon-${icon}`]: true,\n                [styles.liked]: liked\n            })\n            }/>\n            <span className={styles.text}>{text}</span>\n        </span>\n    )\n}","import { FC, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { fetchAllPosts, selectLoadedPosts } from \"../../slices/postsSlice\";\nimport { useAppDispatch } from \"../../util/hooks\";\nimport { FeedPost } from \"./FeedPost\";\nimport styles from \"./PostsFeed.module.scss\";\n\ntype PostsFeedParameters = {\n    username?: string\n}\n\nexport const PostsFeed: FC<PostsFeedParameters> = ({username}) => {\n    const dispatch = useAppDispatch();\n\n    useEffect(() => {\n        dispatch(fetchAllPosts(username));\n    }, [username, dispatch]);\n\n    const posts = useSelector(selectLoadedPosts);\n\n    return (\n        <div className={styles.feed}>\n            <div className={styles.postList}>\n                {posts.map(post => <FeedPost key={post.id} post={post}/>)}\n            </div>\n        </div>\n    )\n}","import { FC } from \"react\";\nimport { IProfile } from \"../types\";\nimport { useLocalization } from \"../util/hooks\";\nimport { Avatar } from \"./basic/Avatar\";\nimport { Button } from \"./basic/Button\";\nimport styles from \"./ProfileInfo.module.scss\";\n\nexport const ProfileInfo: FC<{profile: IProfile, own?: boolean}> = ({profile, own = false}) => {\n    const lp = useLocalization();\n\n    return (\n        <div className={styles.profileInfo}>\n            <div className={styles.top}>\n                <div className={styles.followers}>\n                    <div className={styles.number}>{profile.followers}</div>\n                    <div className={styles.smallText}>{lp(\"profile_followers\", {}, profile.followers)}</div>\n                </div>\n                <Avatar url={profile.profile_photo_url} border size=\"5em\"/>\n                <div className={styles.following}>\n                    <div className={styles.number}>{profile.following}</div>\n                    <div className={styles.smallText}>{lp(\"profile_following\")}</div>\n                </div>\n            </div>\n            <div className={styles.bottom}>\n                <div className={styles.info}>\n                    {`${profile.first_name} ${profile.last_name} - ${profile.job_title}`}\n                </div>\n                <div className={styles.description}>\n                    {profile.description}\n                </div>\n                {own && <div className={styles.actionButtons}>\n                    <Button smallPadding>{lp(\"profile_edit\")}</Button>\n                    <Button smallPadding color=\"blue\">{lp(\"post_new\")}</Button>\n                </div>}\n            </div>\n        </div>\n    )\n}","import { FC, useEffect } from \"react\";\nimport { fetchAllProfiles, selectProfiles } from \"../slices/profileSlice\";\nimport { useAppDispatch, useAppSelector } from \"../util/hooks\";\nimport { Avatar } from \"./basic/Avatar\";\nimport styles from \"./StoriesSlider.module.scss\";\n\nexport const StoriesSlider: FC = () => {\n\n    const dispatch = useAppDispatch();\n\n    useEffect(() => {\n        dispatch(fetchAllProfiles());\n    }, [dispatch]);\n\n    const profiles = useAppSelector(selectProfiles);\n\n    return (\n        <div className={styles.slider}>\n            {profiles.map(profile => <Avatar key={profile.username} url={profile.profile_photo_url} size={\"4em\"} border/>)}\n        </div>\n    )\n} ","import { FC } from \"react\";\nimport { Button } from \"../components/basic/Button\";\nimport { Footer } from \"../components/Footer\";\nimport { Header } from \"../components/Header\";\nimport { PostsFeed } from \"../components/post/PostsFeed\";\nimport { ProfileInfo } from \"../components/ProfileInfo\";\nimport { StoriesSlider } from \"../components/StoriesSlider\";\nimport { selectAccount, selectIsLoggedIn } from \"../slices/profileSlice\";\nimport { IProfile } from \"../types\";\nimport { useAppSelector } from \"../util/hooks\";\nimport styles from \"./Home.module.scss\";\n\nconst Home: FC = () => {\n    const isLoggedIn = useAppSelector(selectIsLoggedIn);\n    const account = useAppSelector(selectAccount) as IProfile;\n    return (\n        <div className={styles.home}>\n            <Header home profile/>\n            <div className={styles.content}>\n                <div className={styles.left}>\n                    <StoriesSlider/>\n                    <PostsFeed/>\n                </div>\n                <div className={styles.right}>\n                    <div className={styles.sticky}>\n                        { isLoggedIn ? <ProfileInfo profile={account} own/> :<Button color=\"black\" to=\"/login\">Login</Button>}\n                        <Footer/>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Home;","import classNames from \"classnames\";\nimport { FC } from \"react\";\nimport styles from \"./Input.module.scss\";\n\ntype InputParameters = {\n    label?: string\n    placeholder?: string\n    icon?: string\n    iconColor?: string\n    className?: string\n    onChange?: React.ChangeEventHandler<HTMLInputElement>\n    [key: string]: any\n}\n\nexport const Input: FC<InputParameters> = ({label, placeholder, icon, iconColor, className, onChange, ...otherParams}) => {\n    return (\n        <label className={classNames({\n            [styles.input]: true\n            }, className)}>\n            {label}\n            <input placeholder={placeholder} onChange={onChange} {...otherParams}/>\n        </label>\n    )\n}","import { FC, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button } from \"../components/basic/Button\";\nimport { Input } from \"../components/basic/Input\";\nimport { Header } from \"../components/Header\";\nimport { fetchCurrentAccount, selectAccount } from \"../slices/profileSlice\";\nimport { createAccount, login } from \"../util/api\";\nimport { useAppDispatch, useAppSelector, useLocalization } from \"../util/hooks\";\nimport styles from \"./Login.module.scss\";\n\nconst Login: FC = () => {\n    const lp = useLocalization();\n    const history = useHistory();\n    const dispatch = useAppDispatch();\n\n    const account = useAppSelector(selectAccount);\n\n    useEffect(() => {\n        if(account) history.replace(\"/\");\n    }, [account, history]);\n\n    const [signUp, setSignUp] = useState(false); \n\n    const [email, setEmail] = useState(\"\");\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    return (\n        <div className={styles.login}>\n            <Header/>\n            <div className={styles.content}>\n                <div className={styles.presentation}>\n                    Photos go wroom\n                </div>\n                <div className={styles.authPane}>\n                    <div className={styles.title}>{lp(signUp ? \"login_sign_up\" : \"login_login\")}</div>\n\n                    <Input \n                        label={lp(\"login_field_email_label\")} \n                        placeholder={lp(\"login_field_email_placeholder\")}\n                        type=\"email\"\n                        className={styles.input}\n                        onChange={ev => setEmail(ev.currentTarget.value)}\n                        value={email}\n                    />\n                    {signUp && <Input \n                        label={lp(\"login_field_username_label\")} \n                        placeholder={lp(\"login_field_username_placeholder\")}\n                        className={styles.input}\n                        onChange={ev => setUsername(ev.currentTarget.value)}\n                        value={username}\n                    />}\n                    <Input \n                        label={lp(\"login_field_password_label\")} \n                        placeholder={lp(\"login_field_password_placeholder\")}\n                        type=\"password\"\n                        className={styles.input}\n                        onChange={ev => setPassword(ev.currentTarget.value)}\n                        value={password}\n                    />\n\n                    <Button color=\"blue\" onClick={() => {\n                        // TODO validate fields\n                        if(signUp) {\n                            createAccount({login: email, password, username})\n                                .then(() => dispatch(fetchCurrentAccount()))\n                                .then(() => history.push(\"/\"));\n                        } else {\n                            login({login: email, password})\n                                .then(() => dispatch(fetchCurrentAccount()))\n                                .then(() => history.push(\"/\"));\n                        }\n                    }}>\n                        {lp(signUp ? \"login_sign_up_button\" : \"login_login_button\")}\n                    </Button>\n                    <div className={styles.switch}>\n                        {lp(signUp ? \"login_have_account\" : \"login_no_account\")}\n                        <span className={styles.inlineSwitch} onClick={() => setSignUp(!signUp)}>\n                            {lp(signUp? \"login_login\" : \"login_sign_up\")}\n                        </span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Login;","import { FC } from \"react\";\n\nconst OwnProfile: FC = () => {\n    return (\n        <div>\n            Your profile\n        </div>\n    )\n}\n\nexport default OwnProfile;","import { FC } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { PostsFeed } from \"../components/post/PostsFeed\";\nimport { selectPostsStatus } from \"../slices/postsSlice\";\nimport { useAppSelector } from \"../util/hooks\";\n\ninterface ProfileParams {\n    username: string\n}\n\nconst Profile: FC = () => {\n    const {username}: ProfileParams = useParams();\n    const status = useAppSelector(selectPostsStatus);\n\n    return (\n        <>\n        Status: {status}\n        <PostsFeed username={username}/>\n        </>\n    )\n}\n\nexport default Profile;","import {\n    HashRouter, Redirect, Route, Switch\n} from \"react-router-dom\";\nimport Home from \"./routes/Home\";\nimport Login from \"./routes/Login\";\nimport OwnProfile from \"./routes/OwnProfile\";\nimport Profile from \"./routes/Profile\";\nimport { selectLanguageCode, setLanguage } from \"./slices/localizationSlice\";\nimport { fetchCurrentAccount } from \"./slices/profileSlice\";\nimport { useAppDispatch, useAppSelector, useMountEffect } from \"./util/hooks\";\n\n\nfunction App() {\n    const dispatch = useAppDispatch();\n    const code = useAppSelector(selectLanguageCode);\n\n    // on first render\n    useMountEffect(() => {\n        dispatch(setLanguage(code));\n\n        if(localStorage.getItem(\"auth\")) dispatch(fetchCurrentAccount());\n    });\n\n    return (\n        <HashRouter>\n            <Switch>\n                <Route path=\"/login\">\n                    <Login />\n                </Route>\n                <Route path=\"/profile/:username\">\n                    <Profile />\n                </Route>\n                <Route exact path=\"/profile\">\n                    <OwnProfile />\n                </Route>\n                <Route exact path=\"/\">\n                    <Home />\n                </Route>\n                <Route>\n                    <Redirect to=\"/\" />\n                </Route>\n            </Switch>\n        </HashRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport \"./css/global.scss\";\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('app')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__1XWLg\",\"top\":\"ProfileInfo_top__69p8p\",\"followers\":\"ProfileInfo_followers__3AkWs\",\"following\":\"ProfileInfo_following__2KBqR\",\"bottom\":\"ProfileInfo_bottom__1AQ71\",\"info\":\"ProfileInfo_info__2Xm6y\",\"description\":\"ProfileInfo_description__1S7g8\",\"actionButtons\":\"ProfileInfo_actionButtons__7S7DM\"};"],"sourceRoot":""}